
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SELFPLAY_H
#define SELFPLAY_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Selfplay.tables.h"

typedef struct Selfplay__ctx_type_0 {
   fix16_t pre_x;
} Selfplay__ctx_type_0;

typedef Selfplay__ctx_type_0 Selfplay_change_type;

static_inline void Selfplay__ctx_type_0_init(Selfplay__ctx_type_0 &_output_){
   Selfplay__ctx_type_0 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Selfplay_change_init(Selfplay__ctx_type_0 &_output_){
   Selfplay__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Selfplay_change(Selfplay__ctx_type_0 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct Selfplay__ctx_type_1 {
   uint8_t pre;
} Selfplay__ctx_type_1;

typedef Selfplay__ctx_type_1 Selfplay_edge_type;

static_inline void Selfplay__ctx_type_1_init(Selfplay__ctx_type_1 &_output_){
   Selfplay__ctx_type_1 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Selfplay_edge_init(Selfplay__ctx_type_1 &_output_){
   Selfplay__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Selfplay_edge(Selfplay__ctx_type_1 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Selfplay__ctx_type_2 {
   fix16_t x;
} Selfplay__ctx_type_2;

typedef Selfplay__ctx_type_2 Selfplay_smooth_type;

static_inline void Selfplay__ctx_type_2_init(Selfplay__ctx_type_2 &_output_){
   Selfplay__ctx_type_2 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Selfplay_smooth_init(Selfplay__ctx_type_2 &_output_){
   Selfplay__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Selfplay_smooth(Selfplay__ctx_type_2 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul(0x147 /* 0.005000 */,(input + (- _ctx.x))));
   return _ctx.x;
}

static_inline fix16_t Selfplay_pitchToRate_raw_c0(int index){
   return Selfplay_pitchToRate_c0[index];
};

static_inline fix16_t Selfplay_pitchToRate_raw_c1(int index){
   return Selfplay_pitchToRate_c1[index];
};

static_inline fix16_t Selfplay_pitchToRate_raw_c2(int index){
   return Selfplay_pitchToRate_c2[index];
};

static_inline fix16_t Selfplay_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Selfplay_pitchToRate_c0)[index] + fix_mul(pitch,(fix_wrap_array(Selfplay_pitchToRate_c1)[index] + fix_mul(pitch,fix_wrap_array(Selfplay_pitchToRate_c2)[index]))));
}

static_inline fix16_t Selfplay_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Selfplay_cvToRate_raw_c0(int index){
   return Selfplay_cvToRate_c0[index];
};

static_inline fix16_t Selfplay_cvToRate_raw_c1(int index){
   return Selfplay_cvToRate_c1[index];
};

static_inline fix16_t Selfplay_cvToRate_raw_c2(int index){
   return Selfplay_cvToRate_c2[index];
};

static_inline fix16_t Selfplay_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Selfplay_cvToRate_c0)[index] + fix_mul(cv,(fix_wrap_array(Selfplay_cvToRate_c1)[index] + fix_mul(cv,fix_wrap_array(Selfplay_cvToRate_c2)[index]))));
}

static_inline fix16_t Selfplay_wave_raw_c0(int index){
   return Selfplay_wave_c0[index];
};

static_inline fix16_t Selfplay_wave_raw_c1(int index){
   return Selfplay_wave_c1[index];
};

static_inline fix16_t Selfplay_wave_raw_c2(int index){
   return Selfplay_wave_c2[index];
};

static_inline fix16_t Selfplay_wave(fix16_t phase){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,phase)),0,127);
   return (fix_wrap_array(Selfplay_wave_c0)[index] + fix_mul(phase,(fix_wrap_array(Selfplay_wave_c1)[index] + fix_mul(phase,fix_wrap_array(Selfplay_wave_c2)[index]))));
}

typedef struct Selfplay__ctx_type_16 {
   fix16_t rate;
   fix16_t phase;
   Selfplay__ctx_type_0 _inst11a;
} Selfplay__ctx_type_16;

typedef Selfplay__ctx_type_16 Selfplay_phase_type;

void Selfplay__ctx_type_16_init(Selfplay__ctx_type_16 &_output_);

static_inline void Selfplay_phase_init(Selfplay__ctx_type_16 &_output_){
   Selfplay__ctx_type_16_init(_output_);
   return ;
}

fix16_t Selfplay_phase(Selfplay__ctx_type_16 &_ctx, fix16_t cv);

typedef Selfplay__ctx_type_16 Selfplay_phase_start_type;

static_inline void Selfplay_phase_start_init(Selfplay__ctx_type_16 &_output_){
   Selfplay__ctx_type_16_init(_output_);
   return ;
}

static_inline void Selfplay_phase_start(Selfplay__ctx_type_16 &_ctx){
   _ctx.rate = 0x30 /* 0.000742 */;
};

typedef struct Selfplay__ctx_type_17 {
   fix16_t rate;
   fix16_t phase;
   Selfplay__ctx_type_0 _inst11a;
} Selfplay__ctx_type_17;

typedef Selfplay__ctx_type_17 Selfplay_lfo_type;

void Selfplay__ctx_type_17_init(Selfplay__ctx_type_17 &_output_);

static_inline void Selfplay_lfo_init(Selfplay__ctx_type_17 &_output_){
   Selfplay__ctx_type_17_init(_output_);
   return ;
}

fix16_t Selfplay_lfo(Selfplay__ctx_type_17 &_ctx, fix16_t cv);

typedef struct Selfplay__ctx_type_18 {
   Selfplay__ctx_type_16 _inst14d;
} Selfplay__ctx_type_18;

typedef Selfplay__ctx_type_18 Selfplay_osc_type;

static_inline void Selfplay__ctx_type_18_init(Selfplay__ctx_type_18 &_output_){
   Selfplay__ctx_type_18 _ctx;
   Selfplay__ctx_type_16_init(_ctx._inst14d);
   _output_ = _ctx;
   return ;
}

static_inline void Selfplay_osc_init(Selfplay__ctx_type_18 &_output_){
   Selfplay__ctx_type_18_init(_output_);
   return ;
}

static_inline fix16_t Selfplay_osc(Selfplay__ctx_type_18 &_ctx, fix16_t cv){
   return Selfplay_wave(Selfplay_phase(_ctx._inst14d,cv));
};

typedef struct Selfplay__ctx_type_19 {
   fix16_t out;
   Selfplay__ctx_type_2 _inst364;
   Selfplay__ctx_type_1 _inst132;
} Selfplay__ctx_type_19;

typedef Selfplay__ctx_type_19 Selfplay_shnoise_type;

void Selfplay__ctx_type_19_init(Selfplay__ctx_type_19 &_output_);

static_inline void Selfplay_shnoise_init(Selfplay__ctx_type_19 &_output_){
   Selfplay__ctx_type_19_init(_output_);
   return ;
}

static_inline fix16_t Selfplay_shnoise(Selfplay__ctx_type_19 &_ctx, fix16_t phase){
   if(Selfplay_edge(_ctx._inst132,(phase > 0x8000 /* 0.500000 */))){
      _ctx.out = fix_random();
   }
   return Selfplay_smooth(_ctx._inst364,_ctx.out);
}

typedef struct Selfplay__ctx_type_20 {
   fix16_t out;
   Selfplay__ctx_type_2 _inst164;
} Selfplay__ctx_type_20;

typedef Selfplay__ctx_type_20 Selfplay_pulse_type;

void Selfplay__ctx_type_20_init(Selfplay__ctx_type_20 &_output_);

static_inline void Selfplay_pulse_init(Selfplay__ctx_type_20 &_output_){
   Selfplay__ctx_type_20_init(_output_);
   return ;
}

static_inline fix16_t Selfplay_pulse(Selfplay__ctx_type_20 &_ctx, fix16_t phase){
   if(phase > 0x8000 /* 0.500000 */){
      _ctx.out = 0x10000 /* 1.000000 */;
   }
   else
   {
      _ctx.out = 0x0 /* 0.000000 */;
   }
   return Selfplay_smooth(_ctx._inst164,_ctx.out);
}

typedef struct Selfplay__ctx_type_21 {
   Selfplay__ctx_type_19 _inst9cc;
   Selfplay__ctx_type_18 _inst8b2;
   Selfplay__ctx_type_19 _inst7cc;
   Selfplay__ctx_type_18 _inst6b2;
   Selfplay__ctx_type_18 _inst5b2;
   Selfplay__ctx_type_19 _inst4cc;
   Selfplay__ctx_type_17 _inst338;
   Selfplay__ctx_type_17 _inst238;
   Selfplay__ctx_type_20 _inst13e5;
   Selfplay__ctx_type_17 _inst138;
   Selfplay__ctx_type_18 _inst12b2;
   Selfplay__ctx_type_19 _inst11cc;
   Selfplay__ctx_type_18 _inst10b2;
} Selfplay__ctx_type_21;

typedef Selfplay__ctx_type_21 Selfplay_process_type;

void Selfplay__ctx_type_21_init(Selfplay__ctx_type_21 &_output_);

static_inline void Selfplay_process_init(Selfplay__ctx_type_21 &_output_){
   Selfplay__ctx_type_21_init(_output_);
   return ;
}

fix16_t Selfplay_process(Selfplay__ctx_type_21 &_ctx);



#endif // SELFPLAY_H
