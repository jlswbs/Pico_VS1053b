
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef AHR_H
#define AHR_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Ahr__ctx_type_0 {
   uint8_t pre;
} Ahr__ctx_type_0;

typedef Ahr__ctx_type_0 Ahr_edge_type;

static_inline void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Ahr_edge_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Ahr_edge(Ahr__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Ahr__ctx_type_1 {
   fix16_t target;
   int state;
   fix16_t rate;
   fix16_t out;
   fix16_t hold_phase;
   Ahr__ctx_type_0 _inst3cd;
   Ahr__ctx_type_0 _inst1cd;
} Ahr__ctx_type_1;

typedef Ahr__ctx_type_1 Ahr_process_type;

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_);

static_inline void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

fix16_t Ahr_process(Ahr__ctx_type_1 &_ctx, fix16_t gate, fix16_t a, fix16_t h, fix16_t r);



#endif // AHR_H
