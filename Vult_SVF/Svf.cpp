
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Svf.h"

void Svf__ctx_type_11_init(Svf__ctx_type_11 &_output_){
   Svf__ctx_type_11 _ctx;
   _ctx.z2 = 0x0 /* 0.000000 */;
   _ctx.z1 = 0x0 /* 0.000000 */;
   _ctx.inv_den = 0x0 /* 0.000000 */;
   _ctx.g = 0x0 /* 0.000000 */;
   Svf__ctx_type_0_init(_ctx._inst26f);
   Svf__ctx_type_0_init(_ctx._inst16f);
   _ctx.R = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Svf_process(Svf__ctx_type_11 &_ctx, fix16_t x, fix16_t cv, fix16_t q, int sel){
   q = (0x8000 /* 0.500000 */ + q);
   if(Svf_change(_ctx._inst16f,cv) || Svf_change(_ctx._inst26f,q)){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = fix_div(0x10000 /* 1.000000 */,((0x0 /* 0.000000 */ + q) << 1));
      _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + fix_mul(_ctx.g,_ctx.g) + (fix_mul(_ctx.R,_ctx.g) << 1)));
   }
   fix16_t high;
   high = fix_mul(_ctx.inv_den,(x + (- _ctx.z2) + (- fix_mul(_ctx.z1,(_ctx.g + (_ctx.R << 1))))));
   fix16_t band;
   band = (_ctx.z1 + fix_mul(_ctx.g,high));
   fix16_t low;
   low = (_ctx.z2 + fix_mul(_ctx.g,band));
   fix16_t notch;
   notch = (high + low);
   _ctx.z1 = (band + fix_mul(_ctx.g,high));
   _ctx.z2 = (low + fix_mul(_ctx.g,band));
   fix16_t output;
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return Svf_saturate_soft(output);
}


