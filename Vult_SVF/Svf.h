
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SVF_H
#define SVF_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Svf.tables.h"

typedef struct Svf__ctx_type_0 {
   fix16_t pre_x;
} Svf__ctx_type_0;

typedef Svf__ctx_type_0 Svf_change_type;

static_inline void Svf__ctx_type_0_init(Svf__ctx_type_0 &_output_){
   Svf__ctx_type_0 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Svf_change_init(Svf__ctx_type_0 &_output_){
   Svf__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Svf_change(Svf__ctx_type_0 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Svf_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Svf_tanh_table_raw_c0(int index){
   return Svf_tanh_table_c0[index];
};

static_inline fix16_t Svf_tanh_table_raw_c1(int index){
   return Svf_tanh_table_c1[index];
};

static_inline fix16_t Svf_tanh_table_raw_c2(int index){
   return Svf_tanh_table_c2[index];
};

static_inline fix16_t Svf_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x50000 /* 5.000000 */,(0x180000 /* 24.000000 */ + x))),0,240);
   return (fix_wrap_array(Svf_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Svf_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Svf_tanh_table_c2)[index]))));
}

static_inline fix16_t Svf_saturate_soft(fix16_t x){
   return Svf_tanh_table(x);
};

static_inline fix16_t Svf_calc_g_raw_c0(int index){
   return Svf_calc_g_c0[index];
};

static_inline fix16_t Svf_calc_g_raw_c1(int index){
   return Svf_calc_g_c1[index];
};

static_inline fix16_t Svf_calc_g_raw_c2(int index){
   return Svf_calc_g_c2[index];
};

static_inline fix16_t Svf_calc_g(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Svf_calc_g_c0)[index] + fix_mul(cv,(fix_wrap_array(Svf_calc_g_c1)[index] + fix_mul(cv,fix_wrap_array(Svf_calc_g_c2)[index]))));
}

typedef struct Svf__ctx_type_11 {
   fix16_t z2;
   fix16_t z1;
   fix16_t inv_den;
   fix16_t g;
   Svf__ctx_type_0 _inst26f;
   Svf__ctx_type_0 _inst16f;
   fix16_t R;
} Svf__ctx_type_11;

typedef Svf__ctx_type_11 Svf_process_type;

void Svf__ctx_type_11_init(Svf__ctx_type_11 &_output_);

static_inline void Svf_process_init(Svf__ctx_type_11 &_output_){
   Svf__ctx_type_11_init(_output_);
   return ;
}

fix16_t Svf_process(Svf__ctx_type_11 &_ctx, fix16_t x, fix16_t cv, fix16_t q, int sel);



#endif // SVF_H
