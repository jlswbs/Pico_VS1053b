
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Saw.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */,_ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Saw__ctx_type_0_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.inc = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

fix16_t Saw_process(Saw__ctx_type_0 &_ctx, fix16_t cv){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.inc = Util_cvToRate(cv);
   }
   fix16_t i;
   if(_ctx.inc < 0x0 /* 0.000000 */){
      i = 0x0 /* 0.000000 */;
   }
   else
   {
      i = _ctx.inc;
   }
   _ctx.phase = (_ctx.phase + (_ctx.inc << 1));
   if(_ctx.phase > 0x20000 /* 2.000000 */){
      _ctx.phase = (-0x20000 /* -2.000000 */ + _ctx.phase);
   }
   fix16_t ph;
   ph = (-0x10000 /* -1.000000 */ + _ctx.phase);
   fix16_t o;
   o = 0x0 /* 0.000000 */;
   if(ph >= (0x10000 /* 1.000000 */ + (- i))){
      fix16_t b;
      b = fix_div((0x10000 /* 1.000000 */ + (- i) + (- ph)),i);
      o = (ph + fix_mul(b,fix_abs(b)));
   }
   else
   {
      if(ph <= (-0x10000 /* -1.000000 */ + i)){
         fix16_t b;
         b = fix_div((-0x10000 /* -1.000000 */ + i + (- ph)),i);
         o = (ph + fix_mul(b,fix_abs(b)));
      }
      else
      {
         o = ph;
      }
   }
   return o;
}


