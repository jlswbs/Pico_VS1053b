
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SAW_H
#define SAW_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Saw.tables.h"

typedef struct _tuple___bool_real__ {
   uint8_t field_0;
   fix16_t field_1;
} _tuple___bool_real__;

typedef struct Saw__ctx_type_0 {
   uint8_t pre;
} Saw__ctx_type_0;

typedef Saw__ctx_type_0 Saw_edge_type;

static_inline void Saw__ctx_type_0_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Saw_edge_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Saw_edge(Saw__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Saw__ctx_type_1 {
   fix16_t pre_x;
} Saw__ctx_type_1;

typedef Saw__ctx_type_1 Saw_change_type;

static_inline void Saw__ctx_type_1_init(Saw__ctx_type_1 &_output_){
   Saw__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Saw_change_init(Saw__ctx_type_1 &_output_){
   Saw__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Saw_change(Saw__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Saw_pitchToRate_1024_raw_c0(int index){
   return Saw_pitchToRate_1024_c0[index];
};

static_inline fix16_t Saw_pitchToRate_1024_raw_c1(int index){
   return Saw_pitchToRate_1024_c1[index];
};

static_inline fix16_t Saw_pitchToRate_1024_raw_c2(int index){
   return Saw_pitchToRate_1024_c2[index];
};

static_inline fix16_t Saw_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Saw_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Saw_pitchToRate_1024_c1)[index] + fix_mul(pitch,fix_wrap_array(Saw_pitchToRate_1024_c2)[index]))));
}

static_inline fix16_t Saw_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Saw_cvToRate_1024_raw_c0(int index){
   return Saw_cvToRate_1024_c0[index];
};

static_inline fix16_t Saw_cvToRate_1024_raw_c1(int index){
   return Saw_cvToRate_1024_c1[index];
};

static_inline fix16_t Saw_cvToRate_1024_raw_c2(int index){
   return Saw_cvToRate_1024_c2[index];
};

static_inline fix16_t Saw_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Saw_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Saw_cvToRate_1024_c1)[index] + fix_mul(cv,fix_wrap_array(Saw_cvToRate_1024_c2)[index]))));
}

typedef struct Saw__ctx_type_11 {
   fix16_t ptr_w2_ret_1;
   uint8_t ptr_w2_ret_0;
} Saw__ctx_type_11;

typedef Saw__ctx_type_11 Saw_ptr_w2_type;

void Saw__ctx_type_11_init(Saw__ctx_type_11 &_output_);

static_inline void Saw_ptr_w2_init(Saw__ctx_type_11 &_output_){
   Saw__ctx_type_11_init(_output_);
   return ;
}

void Saw_ptr_w2(Saw__ctx_type_11 &_ctx, fix16_t phase, fix16_t rate);

typedef Saw__ctx_type_11 Saw_ptr_w2_ret_0_type;

static_inline void Saw_ptr_w2_ret_0_init(Saw__ctx_type_11 &_output_){
   Saw__ctx_type_11_init(_output_);
   return ;
}

static_inline uint8_t Saw_ptr_w2_ret_0(Saw__ctx_type_11 &_ctx){
   return _ctx.ptr_w2_ret_0;
};

typedef Saw__ctx_type_11 Saw_ptr_w2_ret_1_type;

static_inline void Saw_ptr_w2_ret_1_init(Saw__ctx_type_11 &_output_){
   Saw__ctx_type_11_init(_output_);
   return ;
}

static_inline fix16_t Saw_ptr_w2_ret_1(Saw__ctx_type_11 &_ctx){
   return _ctx.ptr_w2_ret_1;
};

typedef struct Saw__ctx_type_12 {
   uint8_t reset_state;
   fix16_t reset_phase;
   fix16_t rate;
   fix16_t phase;
   Saw__ctx_type_11 _inst6d5;
   Saw__ctx_type_0 _inst35c;
   Saw__ctx_type_1 _inst1ac;
} Saw__ctx_type_12;

typedef Saw__ctx_type_12 Saw_process_type;

void Saw__ctx_type_12_init(Saw__ctx_type_12 &_output_);

static_inline void Saw_process_init(Saw__ctx_type_12 &_output_){
   Saw__ctx_type_12_init(_output_);
   return ;
}

fix16_t Saw_process(Saw__ctx_type_12 &_ctx, fix16_t cv, fix16_t reset);

#endif // SAW_H