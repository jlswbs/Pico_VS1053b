// VS1053 DSP MIDI stream hack - Random simplest chaotic generator //

#include "hardware/structs/rosc.h"
#include "PicoSPI.h"

#define MP3_CLK   2
#define MP3_MOSI  3
#define MP3_MISO  4
#define MP3_CS    5
#define MP3_XDCS  17
#define MP3_DREQ  26
#define MP3_RST   13

#define SCI_MODE          0x00
#define SCI_STATUS        0x01
#define SCI_BASS          0x02
#define SCI_CLOCKF        0x03
#define SCI_DECODE_TIME   0x04
#define SCI_AUDATA        0x05
#define SCI_WRAM          0x06
#define SCI_WRAMADDR      0x07
#define SCI_HDAT0         0x08
#define SCI_HDAT1         0x09
#define SCI_AIADDR        0x0A
#define SCI_VOL           0x0B
#define SCI_AICTRL0       0x0C
#define SCI_AICTRL1       0x0D
#define SCI_AICTRL2       0x0E
#define SCI_AICTRL3       0x0F

#define SM_DIFF           0x00
#define SM_LAYER12        0x01
#define SM_RESET          0x02
#define SM_CANCEL         0x03
#define SM_EARSPEAKER_LO  0x04
#define SM_TESTS          0x05
#define SM_STREAM         0x06
#define SM_EARSPEAKER_HI  0x07
#define SM_DACT           0x08
#define SM_SDIORD         0x09
#define SM_SDISHARE       0x0A
#define SM_SDINEW         0x0B
#define SM_ADPCM          0x0C
#define SM_ADPCM_HP       0x0D
#define SM_LINE1          0x0E
#define SM_CLK_RANGE      0x0F

  float a = 0.0f;
  float x = 0.1f;

float randomf(float minf, float maxf) {return minf + (rand()%(1UL << 31))*(maxf - minf) / (1UL << 31);}

static inline void seed_random_from_rosc(){
  
  uint32_t random = 0;
  uint32_t random_bit;
  volatile uint32_t *rnd_reg = (uint32_t *)(ROSC_BASE + ROSC_RANDOMBIT_OFFSET);

  for (int k = 0; k < 32; k++) {
    while (1) {
      random_bit = (*rnd_reg) & 1;
      if (random_bit != ((*rnd_reg) & 1)) break;
    }

    random = (random << 1) | random_bit;
  }
  
  srand(random);
}

void WriteReg(unsigned char address, unsigned char highbyte, unsigned char lowbyte){
  
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, LOW);
  PicoSPI0.transfer(0x02);
  PicoSPI0.transfer(address);
  PicoSPI0.transfer(highbyte);
  PicoSPI0.transfer(lowbyte);
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, HIGH);
  
}

void WriteReg16(unsigned char address, unsigned int databyte){
  
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, LOW);
  PicoSPI0.transfer(0x02);
  PicoSPI0.transfer(address);
  PicoSPI0.transfer((databyte >> 8) & 0xFF);
  PicoSPI0.transfer(databyte & 0xFF);
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, HIGH);
  
}

unsigned int ReadReg(unsigned char address){
  
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, LOW);
  PicoSPI0.transfer(0x03);
  PicoSPI0.transfer(address);
  char response1 = PicoSPI0.transfer(0xFF);
  while(!digitalRead(MP3_DREQ));
  char response2 = PicoSPI0.transfer(0xFF);
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, HIGH);
  int resultvalue = response1 << 8;
  resultvalue |= response2;
  return resultvalue;
  
}

unsigned char HelloMIDI[] = {
0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x01,0x01,0xE0,0x4D,0x54,
0x72,0x6B,0x00,0x00,0x89,0x3E,0x00,0xFF,0x03,0x05,0x44,0x41,0x4E,0x43,0x45,0x00,
0xFF,0x58,0x04,0x04,0x02,0x18,0x08,0x00,0xFF,0x59,0x02,0x00,0x00,0x00,0xFF,0x51,
0x03,0x07,0xA1,0x20,0x00,0xFF,0x06,0x05,0x44,0x61,0x6E,0x63,0x65,0x00,0xB0,0x00,
0x00,0x00,0xB0,0x07,0x52,0x00,0xB0,0x0A,0x1D,0x00,0xB0,0x79,0x7F,0x00,0xB1,0x00,
0x00,0x00,0xB1,0x07,0x6C,0x00,0xB1,0x0A,0x40,0x00,0xB1,0x79,0x7F,0x00,0xB2,0x00,
0x00,0x00,0xB2,0x07,0x7F,0x00,0xB2,0x0A,0x35,0x00,0xB2,0x79,0x7F,0x00,0xB3,0x00,
0x00,0x00,0xB3,0x07,0x49,0x00,0xB3,0x0A,0x00,0x00,0xB3,0x79,0x7F,0x00,0xB4,0x00,
0x00,0x00,0xB4,0x07,0x49,0x00,0xB4,0x0A,0x7F,0x00,0xB4,0x79,0x7F,0x00,0xB5,0x00,
0x00,0x00,0xB5,0x07,0x73,0x00,0xB5,0x0A,0x4A,0x00,0xB5,0x79,0x7F,0x00,0xB6,0x00,
0x00,0x00,0xB6,0x07,0x6A,0x00,0xB6,0x0A,0x2C,0x00,0xB6,0x79,0x7F,0x00,0xB7,0x00,
0x00,0x00,0xB7,0x07,0x7F,0x00,0xB7,0x0A,0x24,0x00,0xB7,0x79,0x7F,0x00,0xB8,0x00,
0x00,0x00,0xB8,0x07,0x64,0x00,0xB8,0x0A,0x56,0x00,0xB8,0x79,0x7F,0x00,0xB9,0x00,
0x00,0x00,0xB9,0x07,0x7F,0x00,0xB9,0x0A,0x40,0x00,0xB9,0x79,0x7F,0x01,0xB0,0x20,
0x00,0x00,0xB1,0x20,0x00,0x00,0xB2,0x20,0x00,0x00,0xB3,0x20,0x00,0x00,0xB4,0x20,
0x00,0x00,0xB5,0x20,0x00,0x00,0xB6,0x20,0x00,0x00,0xB7,0x20,0x00,0x00,0xB8,0x20,
0x00,0x00,0xB9,0x20,0x00,0x01,0xC0,0x58,0x00,0xC1,0x24,0x00,0xC2,0x37,0x00,0xC3,
0x11,0x00,0xC4,0x11,0x00,0xC5,0x3D,0x00,0xC6,0x40,0x00,0xC7,0x5F,0x00,0xC8,0x62,
0x00,0xC9,0x00,0x83,0x1C,0xB0,0x5B,0x46,0x01,0xB1,0x5B,0x32,0x01,0xB2,0x5B,0x1E,
0x01,0xB3,0x5B,0x3C,0x01,0xB4,0x5B,0x2D,0x01,0xB5,0x5B,0x32,0x01,0xB6,0x5B,0x3F,
0x01,0xB7,0x5B,0x3F,0x01,0xB8,0x5B,0x3F,0x02,0xB3,0x5D,0x64,0x00,0xB4,0x5D,0x4B,
0x00,0xB5,0x5D,0x32,0x00,0xB7,0x5D,0x6E,0x00,0xB9,0x5B,0x14,0x71,0xB3,0x01,0x00,
0x70,0xB7,0x01,0x00,0x70,0xB9,0x01,0x00,0x78,0x99,0x50,0x40,0x00,0x99,0x2C,0x40,
0x02,0x93,0x43,0x5C,0x00,0x93,0x46,0x50,0x00,0x93,0x48,0x4E,0x00,0x93,0x4B,0x68,
0x00,0xB4,0x01,0x00,0x00,0xB7,0x07,0x40,0x00,0x97,0x3C,0x7F,0x00,0x97,0x37,0x7F,
0x00,0x97,0x3F,0x7F,0x00,0x97,0x3A,0x7F,0x00,0x99
};

void setup(){

  seed_random_from_rosc();
  analogReadResolution(12);
  
  pinMode(MP3_DREQ, INPUT);
  pinMode(MP3_CS, OUTPUT);
  pinMode(MP3_XDCS, OUTPUT);
  pinMode(MP3_RST, OUTPUT);

  PicoSPI0.configure (MP3_CLK, MP3_MOSI, MP3_MISO, MP3_CS, 4000000, 0, true);
  PicoSPI0.transfer(0xFF);

  digitalWrite(MP3_RST, HIGH);
  digitalWrite(MP3_CS, HIGH);
  digitalWrite(MP3_XDCS, HIGH);

  WriteReg16(SCI_CLOCKF, 0x6000); // set multiplier to 3.0x
  WriteReg16(SCI_VOL, 0x3F3F);    // set volume

  unsigned char *p;
  p = &HelloMIDI[0];
  
  while(p <= &HelloMIDI[sizeof(HelloMIDI) - 1]){
    while(!digitalRead(MP3_DREQ)){}
    digitalWrite(MP3_XDCS, LOW);
    PicoSPI0.transfer(*p++);
    digitalWrite(MP3_XDCS, HIGH);
  }

  a = randomf(1.2999f, 1.9999f);

}

void loop(){
  
  float nx = x;
  x = a - powf(nx, 2.0f);
  uint8_t p = 64.0f + (32.0f * x);    
 
  while(!digitalRead(MP3_DREQ)){}
  digitalWrite(MP3_XDCS, LOW);
  PicoSPI0.transfer(p);
  digitalWrite(MP3_XDCS, HIGH);

}