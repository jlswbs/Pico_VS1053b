
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Phasedist.h"

void Phasedist__ctx_type_2_init(Phasedist__ctx_type_2 &_output_){
   Phasedist__ctx_type_2 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Phasedist__ctx_type_0_init(_ctx._inst11a);
   _output_ = _ctx;
   return ;
}

fix16_t Phasedist_phasor(Phasedist__ctx_type_2 &_ctx, fix16_t pitch, uint8_t reset){
   if(Phasedist_change(_ctx._inst11a,pitch)){
      _ctx.rate = Phasedist_pitchToRate(pitch);
   }
   if(reset){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.phase = ((_ctx.phase + _ctx.rate) % 0x10000 /* 1.000000 */);
   }
   return _ctx.phase;
}

void Phasedist__ctx_type_3_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3 _ctx;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.detune = 0x0 /* 0.000000 */;
   Phasedist__ctx_type_2_init(_ctx._inst239);
   Phasedist__ctx_type_2_init(_ctx._inst139);
   _output_ = _ctx;
   return ;
}

fix16_t Phasedist_process(Phasedist__ctx_type_3 &_ctx, fix16_t input){
   fix16_t phase1;
   phase1 = Phasedist_phasor(_ctx._inst139,_ctx.pitch,false);
   fix16_t comp;
   comp = (0x10000 /* 1.000000 */ + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   fix16_t phase2;
   phase2 = Phasedist_phasor(_ctx._inst239,(_ctx.pitch + (_ctx.detune << 5)),reset);
   fix16_t sine;
   sine = fix_sin(fix_mul(0x6487e /* 6.283185 */,phase2));
   return fix_mul(comp,sine);
}