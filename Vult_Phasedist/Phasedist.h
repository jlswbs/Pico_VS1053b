
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef PHASEDIST_H
#define PHASEDIST_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Phasedist__ctx_type_0 {
   fix16_t pre_x;
} Phasedist__ctx_type_0;

typedef Phasedist__ctx_type_0 Phasedist_change_type;

static_inline void Phasedist__ctx_type_0_init(Phasedist__ctx_type_0 &_output_){
   Phasedist__ctx_type_0 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Phasedist_change_init(Phasedist__ctx_type_0 &_output_){
   Phasedist__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Phasedist_change(Phasedist__ctx_type_0 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Phasedist_pitchToRate(fix16_t d){
   return fix_mul(0x18 /* 0.000371 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
};

typedef struct Phasedist__ctx_type_2 {
   fix16_t rate;
   fix16_t phase;
   Phasedist__ctx_type_0 _inst11a;
} Phasedist__ctx_type_2;

typedef Phasedist__ctx_type_2 Phasedist_phasor_type;

void Phasedist__ctx_type_2_init(Phasedist__ctx_type_2 &_output_);

static_inline void Phasedist_phasor_init(Phasedist__ctx_type_2 &_output_){
   Phasedist__ctx_type_2_init(_output_);
   return ;
}

fix16_t Phasedist_phasor(Phasedist__ctx_type_2 &_ctx, fix16_t pitch, uint8_t reset);

typedef struct Phasedist__ctx_type_3 {
   fix16_t pre_phase1;
   fix16_t pitch;
   fix16_t detune;
   Phasedist__ctx_type_2 _inst239;
   Phasedist__ctx_type_2 _inst139;
} Phasedist__ctx_type_3;

typedef Phasedist__ctx_type_3 Phasedist_process_type;

void Phasedist__ctx_type_3_init(Phasedist__ctx_type_3 &_output_);

static_inline void Phasedist_process_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

fix16_t Phasedist_process(Phasedist__ctx_type_3 &_ctx, fix16_t input);

typedef Phasedist__ctx_type_3 Phasedist_noteOn_type;

static_inline void Phasedist_noteOn_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

static_inline void Phasedist_noteOn(Phasedist__ctx_type_3 &_ctx, int note){
   _ctx.pitch = int_to_fix(note);
};

typedef Phasedist__ctx_type_3 Phasedist_controlChange_type;

static_inline void Phasedist_controlChange_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

static_inline void Phasedist_controlChange(Phasedist__ctx_type_3 &_ctx, int value){
      _ctx.detune = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
};

typedef Phasedist__ctx_type_3 Phasedist_default_type;

static_inline void Phasedist_default_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

static_inline void Phasedist_default(Phasedist__ctx_type_3 &_ctx){
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
   _ctx.detune = 0x0 /* 0.000000 */;
}

class Phasedist
{
public:
  Phasedist(void)
  {
     Phasedist_process_init(data);
  }

  void begin() {
    Phasedist_default(data);
  }

  // Handles note on events
  void noteOn(int note){
    // If the velocity is larger than zero, means that is turning on
    Phasedist_noteOn(data, note);
  }

  // Handles control change events
  void rate(int value) {
    Phasedist_controlChange(data, value);
  }

  int16_t output() {
    return Phasedist_process(data, 0)>>1;  
  }

private:
  Phasedist_process_type data;

};

#endif // PHASEDIST_H
