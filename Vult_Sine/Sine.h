
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SINE_H
#define SINE_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Sine.tables.h"

static_inline fix16_t Sine_nsine_raw_c0(int index){
   return Sine_nsine_c0[index];
};

static_inline fix16_t Sine_nsine_raw_c1(int index){
   return Sine_nsine_c1[index];
};

static_inline fix16_t Sine_nsine_raw_c2(int index){
   return Sine_nsine_c2[index];
};

static_inline fix16_t Sine_nsine(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,x)),0,127);
   return (fix_wrap_array(Sine_nsine_c0)[index] + fix_mul(x,(fix_wrap_array(Sine_nsine_c1)[index] + fix_mul(x,fix_wrap_array(Sine_nsine_c2)[index]))));
}

typedef struct Sine__ctx_type_4 {
   uint8_t pre;
} Sine__ctx_type_4;

typedef Sine__ctx_type_4 Sine_edge_type;

static_inline void Sine__ctx_type_4_init(Sine__ctx_type_4 &_output_){
   Sine__ctx_type_4 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Sine_edge_init(Sine__ctx_type_4 &_output_){
   Sine__ctx_type_4_init(_output_);
   return ;
}

static_inline uint8_t Sine_edge(Sine__ctx_type_4 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Sine__ctx_type_5 {
   fix16_t pre_x;
} Sine__ctx_type_5;

typedef Sine__ctx_type_5 Sine_change_type;

static_inline void Sine__ctx_type_5_init(Sine__ctx_type_5 &_output_){
   Sine__ctx_type_5 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Sine_change_init(Sine__ctx_type_5 &_output_){
   Sine__ctx_type_5_init(_output_);
   return ;
}

static_inline uint8_t Sine_change(Sine__ctx_type_5 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Sine_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Sine_pitchToRate_1024_raw_c0(int index){
   return Sine_pitchToRate_1024_c0[index];
};

static_inline fix16_t Sine_pitchToRate_1024_raw_c1(int index){
   return Sine_pitchToRate_1024_c1[index];
};

static_inline fix16_t Sine_pitchToRate_1024_raw_c2(int index){
   return Sine_pitchToRate_1024_c2[index];
};

static_inline fix16_t Sine_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Sine_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Sine_pitchToRate_1024_c1)[index] + fix_mul(pitch,fix_wrap_array(Sine_pitchToRate_1024_c2)[index]))));
}

static_inline fix16_t Sine_cvToRate_1024_raw_c0(int index){
   return Sine_cvToRate_1024_c0[index];
};

static_inline fix16_t Sine_cvToRate_1024_raw_c1(int index){
   return Sine_cvToRate_1024_c1[index];
};

static_inline fix16_t Sine_cvToRate_1024_raw_c2(int index){
   return Sine_cvToRate_1024_c2[index];
};

static_inline fix16_t Sine_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Sine_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Sine_cvToRate_1024_c1)[index] + fix_mul(cv,fix_wrap_array(Sine_cvToRate_1024_c2)[index]))));
}

typedef struct Sine__ctx_type_15 {
   fix16_t rate;
   fix16_t phase;
   Sine__ctx_type_4 _inst321;
   Sine__ctx_type_5 _inst124;
} Sine__ctx_type_15;

typedef Sine__ctx_type_15 Sine_phase_type;

void Sine__ctx_type_15_init(Sine__ctx_type_15 &_output_);

static_inline void Sine_phase_init(Sine__ctx_type_15 &_output_){
   Sine__ctx_type_15_init(_output_);
   return ;
}

fix16_t Sine_phase(Sine__ctx_type_15 &_ctx, fix16_t cv, fix16_t reset);

typedef struct Sine__ctx_type_16 {
   uint8_t trig;
   Sine__ctx_type_15 _inst54d;
   Sine__ctx_type_15 _inst34d;
   Sine__ctx_type_4 _inst121;
} Sine__ctx_type_16;

typedef Sine__ctx_type_16 Sine_process_type;

void Sine__ctx_type_16_init(Sine__ctx_type_16 &_output_);

static_inline void Sine_process_init(Sine__ctx_type_16 &_output_){
   Sine__ctx_type_16_init(_output_);
   return ;
}

fix16_t Sine_process(Sine__ctx_type_16 &_ctx, fix16_t cv, fix16_t reset);

#endif // SINE_H
