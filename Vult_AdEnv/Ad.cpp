
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Ad.h"

void Ad__ctx_type_1_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   Ad__ctx_type_0_init(_ctx._inst2b3);
   _output_ = _ctx;
   return ;
}

fix16_t Ad_process(Ad__ctx_type_1 &_ctx, fix16_t gate, fix16_t a, fix16_t d){
   fix16_t a_rate;
   a_rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,a)));
   fix16_t d_rate;
   d_rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,d)));
   uint8_t bgate;
   bgate = (gate > 0x0 /* 0.000000 */);
   _ctx.out = (_ctx.out + fix_mul(fix_mul(0x106 /* 0.004000 */,_ctx.rate),(_ctx.target + (- _ctx.out))));
   if(_ctx.state == 0){
      if(Ad_edge(_ctx._inst2b3,bgate)){
         _ctx.state = 1;
         _ctx.scale = fix_mul(0x3333 /* 0.200000 */,gate);
      }
      _ctx.rate = d_rate;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   if(_ctx.state == 1){
      if(bool_not(bgate) || (_ctx.out > 0x4000000 /* 1024.000000 */)){
         _ctx.state = 0;
      }
      _ctx.rate = a_rate;
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   return fix_mul(_ctx.scale,fix_clip((_ctx.out >> 10),0x0 /* 0.000000 */,0x10000 /* 1.000000 */));
}


