
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Sine.h"

void Sine__ctx_type_15_init(Sine__ctx_type_15 &_output_){
   Sine__ctx_type_15 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Sine__ctx_type_4_init(_ctx._inst321);
   Sine__ctx_type_5_init(_ctx._inst124);
   _output_ = _ctx;
   return ;
}

fix16_t Sine_phase(Sine__ctx_type_15 &_ctx, fix16_t cv, fix16_t reset){
   if(Sine_change(_ctx._inst124,cv)){
      _ctx.rate = Sine_cvToRate_1024(cv);
   }
   if(Sine_edge(_ctx._inst321,(reset > 0x8000 /* 0.500000 */))){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 0x4000000 /* 1024.000000 */){
      _ctx.phase = (-0x4000000 /* -1024.000000 */ + _ctx.phase);
   }
   return (_ctx.phase >> 10);
}

void Sine__ctx_type_16_init(Sine__ctx_type_16 &_output_){
   Sine__ctx_type_16 _ctx;
   _ctx.trig = false;
   Sine__ctx_type_15_init(_ctx._inst54d);
   Sine__ctx_type_15_init(_ctx._inst34d);
   Sine__ctx_type_4_init(_ctx._inst121);
   _output_ = _ctx;
   return ;
}

fix16_t Sine_process(Sine__ctx_type_16 &_ctx, fix16_t cv, fix16_t reset){
   if(Sine_edge(_ctx._inst121,(reset > 0x8000 /* 0.500000 */))){
      _ctx.trig = true;
   }
   fix16_t phase;
   phase = Sine_phase(_ctx._inst34d,cv,0x0 /* 0.000000 */);
   if((phase < 0x0 /* 0.000000 */) && _ctx.trig){
      _ctx.trig = false;
      Sine_phase(_ctx._inst54d,cv,0x0 /* 0.000000 */);
   }
   return Sine_nsine(phase);
}


