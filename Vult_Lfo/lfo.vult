/*
The MIT License (MIT)

Copyright (c) 2017 Leonardo Laguna Ruiz
-----
Saw, triangle and square LFO
*/

fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

fun edge(x:bool) : bool {
   mem pre;
   val ret = x && not(pre);
   pre = x;
   return ret;
}

fun soft(x1) {
   mem x2,x3,x4;
   val o = (x1+x2+x3+x4)/4.0;
   x2,x3,x4 = x1,x2,x3;
   return o;
}

fun pitchToRate(pitch) @[table(size=32, min=0.0, max=127.0)] {
   return 0.00018539226566085504 * exp(0.057762265046662105 * pitch);
}

fun cvToPitch(cv) {
   return cv * 120.0 + 24.0;
}

fun cvToRate(cv) @[table(size=128, min=0.0, max=0.9)] {
   return pitchToRate(cvToPitch(cv));
}

fun process(cv, shape, reset) {
   mem rate;
   if(change(cv))
      rate = cvToRate(cv-0.3);
   mem phase = phase + rate;
   phase = if phase > 2.0 then phase - 2.0 else phase;
   val breset = reset > 0.0;
   if(edge(breset))
      phase = 0.0;
   val tmp = phase - 1.0;
   val o =
      if shape < 1.0 then tmp
      else if shape < 2.0 then
         (abs(tmp) * 2.0 - 1.0)
      else
         (if tmp > 0.0 then 1.0 else 0.0);
   return soft(o);
}