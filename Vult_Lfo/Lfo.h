
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef LFO_H
#define LFO_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Lfo.tables.h"

typedef struct Lfo__ctx_type_0 {
   fix16_t pre_x;
} Lfo__ctx_type_0;

typedef Lfo__ctx_type_0 Lfo_change_type;

static_inline void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Lfo_change_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Lfo_change(Lfo__ctx_type_0 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct Lfo__ctx_type_1 {
   uint8_t pre;
} Lfo__ctx_type_1;

typedef Lfo__ctx_type_1 Lfo_edge_type;

static_inline void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Lfo_edge_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Lfo_edge(Lfo__ctx_type_1 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Lfo__ctx_type_2 {
   fix16_t x4;
   fix16_t x3;
   fix16_t x2;
} Lfo__ctx_type_2;

typedef Lfo__ctx_type_2 Lfo_soft_type;

void Lfo__ctx_type_2_init(Lfo__ctx_type_2 &_output_);

static_inline void Lfo_soft_init(Lfo__ctx_type_2 &_output_){
   Lfo__ctx_type_2_init(_output_);
   return ;
}

fix16_t Lfo_soft(Lfo__ctx_type_2 &_ctx, fix16_t x1);

static_inline fix16_t Lfo_pitchToRate_raw_c0(int index){
   return Lfo_pitchToRate_c0[index];
};

static_inline fix16_t Lfo_pitchToRate_raw_c1(int index){
   return Lfo_pitchToRate_c1[index];
};

static_inline fix16_t Lfo_pitchToRate_raw_c2(int index){
   return Lfo_pitchToRate_c2[index];
};

static_inline fix16_t Lfo_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Lfo_pitchToRate_c0)[index] + fix_mul(pitch,(fix_wrap_array(Lfo_pitchToRate_c1)[index] + fix_mul(pitch,fix_wrap_array(Lfo_pitchToRate_c2)[index]))));
}

static_inline fix16_t Lfo_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Lfo_cvToRate_raw_c0(int index){
   return Lfo_cvToRate_c0[index];
};

static_inline fix16_t Lfo_cvToRate_raw_c1(int index){
   return Lfo_cvToRate_c1[index];
};

static_inline fix16_t Lfo_cvToRate_raw_c2(int index){
   return Lfo_cvToRate_c2[index];
};

static_inline fix16_t Lfo_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Lfo_cvToRate_c0)[index] + fix_mul(cv,(fix_wrap_array(Lfo_cvToRate_c1)[index] + fix_mul(cv,fix_wrap_array(Lfo_cvToRate_c2)[index]))));
}

typedef struct Lfo__ctx_type_12 {
   fix16_t rate;
   fix16_t phase;
   Lfo__ctx_type_2 _inst59b;
   Lfo__ctx_type_1 _inst39d;
   Lfo__ctx_type_0 _inst1d7;
} Lfo__ctx_type_12;

typedef Lfo__ctx_type_12 Lfo_process_type;

void Lfo__ctx_type_12_init(Lfo__ctx_type_12 &_output_);

static_inline void Lfo_process_init(Lfo__ctx_type_12 &_output_){
   Lfo__ctx_type_12_init(_output_);
   return ;
}

fix16_t Lfo_process(Lfo__ctx_type_12 &_ctx, fix16_t cv, fix16_t shape, fix16_t reset);



#endif // LFO_H
