
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef BLEP_H
#define BLEP_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Blep.tables.h"

static_inline int Blep_blep_samples(){
   return 678;
};

static_inline fix16_t Blep_blep(int ch, int i){
   if(ch == 0){
      return fix_wrap_array(Blep_blep_chan_0)[(i % 678)];
   }
   return 0x0 /* 0.000000 */;
}

typedef struct Blep__ctx_type_2 {
   uint8_t pre;
} Blep__ctx_type_2;

typedef Blep__ctx_type_2 Blep_edge_type;

static_inline void Blep__ctx_type_2_init(Blep__ctx_type_2 &_output_){
   Blep__ctx_type_2 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Blep_edge_init(Blep__ctx_type_2 &_output_){
   Blep__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t Blep_edge(Blep__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Blep__ctx_type_3 {
   fix16_t pre_x;
} Blep__ctx_type_3;

typedef Blep__ctx_type_3 Blep_change_type;

static_inline void Blep__ctx_type_3_init(Blep__ctx_type_3 &_output_){
   Blep__ctx_type_3 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Blep_change_init(Blep__ctx_type_3 &_output_){
   Blep__ctx_type_3_init(_output_);
   return ;
}

static_inline uint8_t Blep_change(Blep__ctx_type_3 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Blep_pitchToRate_1024_raw_c0(int index){
   return Blep_pitchToRate_1024_c0[index];
};

static_inline fix16_t Blep_pitchToRate_1024_raw_c1(int index){
   return Blep_pitchToRate_1024_c1[index];
};

static_inline fix16_t Blep_pitchToRate_1024_raw_c2(int index){
   return Blep_pitchToRate_1024_c2[index];
};

static_inline fix16_t Blep_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Blep_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Blep_pitchToRate_1024_c1)[index] + fix_mul(pitch,fix_wrap_array(Blep_pitchToRate_1024_c2)[index]))));
}

static_inline fix16_t Blep_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Blep_cvToRate_1024_raw_c0(int index){
   return Blep_cvToRate_1024_c0[index];
};

static_inline fix16_t Blep_cvToRate_1024_raw_c1(int index){
   return Blep_cvToRate_1024_c1[index];
};

static_inline fix16_t Blep_cvToRate_1024_raw_c2(int index){
   return Blep_cvToRate_1024_c2[index];
};

static_inline fix16_t Blep_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Blep_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Blep_cvToRate_1024_c1)[index] + fix_mul(cv,fix_wrap_array(Blep_cvToRate_1024_c2)[index]))));
}

typedef struct Blep__ctx_type_13 {
   fix16_t rate;
   fix16_t phase;
   Blep__ctx_type_2 _inst31a;
   Blep__ctx_type_3 _inst1bb;
} Blep__ctx_type_13;

typedef Blep__ctx_type_13 Blep_phase_type;

void Blep__ctx_type_13_init(Blep__ctx_type_13 &_output_);

static_inline void Blep_phase_init(Blep__ctx_type_13 &_output_){
   Blep__ctx_type_13_init(_output_);
   return ;
}

fix16_t Blep_phase(Blep__ctx_type_13 &_ctx, fix16_t cv, fix16_t reset);

typedef struct Blep__ctx_type_14 {
   uint8_t playing;
   int index;
   Blep__ctx_type_2 _inst11a;
} Blep__ctx_type_14;

typedef Blep__ctx_type_14 Blep_blep_play_type;

void Blep__ctx_type_14_init(Blep__ctx_type_14 &_output_);

static_inline void Blep_blep_play_init(Blep__ctx_type_14 &_output_){
   Blep__ctx_type_14_init(_output_);
   return ;
}

fix16_t Blep_blep_play(Blep__ctx_type_14 &_ctx, uint8_t trigger);

typedef struct Blep__ctx_type_15 {
   fix16_t pre_phase;
   int active_blep;
   fix16_t acc;
   Blep__ctx_type_14 _inst715;
   Blep__ctx_type_14 _inst615;
   Blep__ctx_type_14 _inst515;
   Blep__ctx_type_14 _inst415;
   Blep__ctx_type_2 _inst21a;
   Blep__ctx_type_13 _inst19e;
} Blep__ctx_type_15;

typedef Blep__ctx_type_15 Blep_blep_step_type;

void Blep__ctx_type_15_init(Blep__ctx_type_15 &_output_);

static_inline void Blep_blep_step_init(Blep__ctx_type_15 &_output_){
   Blep__ctx_type_15_init(_output_);
   return ;
}

fix16_t Blep_blep_step(Blep__ctx_type_15 &_ctx, fix16_t cv, uint8_t reset);

typedef struct Blep__ctx_type_16 {
   Blep__ctx_type_15 o;
} Blep__ctx_type_16;

typedef Blep__ctx_type_16 Blep_process_type;

static_inline void Blep__ctx_type_16_init(Blep__ctx_type_16 &_output_){
   Blep__ctx_type_16 _ctx;
   Blep__ctx_type_15_init(_ctx.o);
   _output_ = _ctx;
   return ;
}

static_inline void Blep_process_init(Blep__ctx_type_16 &_output_){
   Blep__ctx_type_16_init(_output_);
   return ;
}

fix16_t Blep_process(Blep__ctx_type_16 &_ctx, fix16_t cv, fix16_t reset);



#endif // BLEP_H
