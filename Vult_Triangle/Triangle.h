
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef TRIANGLE_H
#define TRIANGLE_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Triangle.tables.h"

typedef struct Triangle__ctx_type_0 {
   uint8_t pre;
} Triangle__ctx_type_0;

typedef Triangle__ctx_type_0 Triangle_edge_type;

static_inline void Triangle__ctx_type_0_init(Triangle__ctx_type_0 &_output_){
   Triangle__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Triangle_edge_init(Triangle__ctx_type_0 &_output_){
   Triangle__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Triangle_edge(Triangle__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Triangle__ctx_type_1 {
   fix16_t pre_x;
} Triangle__ctx_type_1;

typedef Triangle__ctx_type_1 Triangle_change_type;

static_inline void Triangle__ctx_type_1_init(Triangle__ctx_type_1 &_output_){
   Triangle__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Triangle_change_init(Triangle__ctx_type_1 &_output_){
   Triangle__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Triangle_change(Triangle__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Triangle_pitchToRate_1024_raw_c0(int index){
   return Triangle_pitchToRate_1024_c0[index];
};

static_inline fix16_t Triangle_pitchToRate_1024_raw_c1(int index){
   return Triangle_pitchToRate_1024_c1[index];
};

static_inline fix16_t Triangle_pitchToRate_1024_raw_c2(int index){
   return Triangle_pitchToRate_1024_c2[index];
};

static_inline fix16_t Triangle_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Triangle_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Triangle_pitchToRate_1024_c1)[index] + fix_mul(pitch,fix_wrap_array(Triangle_pitchToRate_1024_c2)[index]))));
}

static_inline fix16_t Triangle_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Triangle_cvToRate_1024_raw_c0(int index){
   return Triangle_cvToRate_1024_c0[index];
};

static_inline fix16_t Triangle_cvToRate_1024_raw_c1(int index){
   return Triangle_cvToRate_1024_c1[index];
};

static_inline fix16_t Triangle_cvToRate_1024_raw_c2(int index){
   return Triangle_cvToRate_1024_c2[index];
};

static_inline fix16_t Triangle_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Triangle_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Triangle_cvToRate_1024_c1)[index] + fix_mul(cv,fix_wrap_array(Triangle_cvToRate_1024_c2)[index]))));
}

typedef struct Triangle__ctx_type_11 {
   uint8_t reset_state;
   fix16_t reset_phase;
   fix16_t rate;
   fix16_t phase;
   uint8_t direction;
   Triangle__ctx_type_0 _inst4fb;
   Triangle__ctx_type_0 _inst3fb;
   Triangle__ctx_type_1 _inst131;
} Triangle__ctx_type_11;

typedef Triangle__ctx_type_11 Triangle_process_type;

void Triangle__ctx_type_11_init(Triangle__ctx_type_11 &_output_);

static_inline void Triangle_process_init(Triangle__ctx_type_11 &_output_){
   Triangle__ctx_type_11_init(_output_);
   return ;
}

fix16_t Triangle_process(Triangle__ctx_type_11 &_ctx, fix16_t cv, fix16_t reset, fix16_t disable);



#endif // TRIANGLE_H
