
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Dline.h"

void Dline__ctx_type_5_init(Dline__ctx_type_5 &_output_){
   Dline__ctx_type_5 _ctx;
   _ctx.x4 = 0x0 /* 0.000000 */;
   _ctx.x3 = 0x0 /* 0.000000 */;
   _ctx.x2 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Dline_soft(Dline__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t o;
   o = ((_ctx.x2 + _ctx.x3 + _ctx.x4 + x1) >> 2);
   fix16_t _tmp_1_0;
   _tmp_1_0 = x1;
   fix16_t _tmp_1_1;
   _tmp_1_1 = _ctx.x2;
   fix16_t _tmp_1_2;
   _tmp_1_2 = _ctx.x3;
   _ctx.x2 = _tmp_1_0;
   _ctx.x3 = _tmp_1_1;
   _ctx.x4 = _tmp_1_2;
   return o;
}

void Dline__ctx_type_6_init(Dline__ctx_type_6 &_output_){
   Dline__ctx_type_6 _ctx;
   _ctx.write_pos = 0;
   ;
   _output_ = _ctx;
   return ;
}

fix16_t Dline_do(Dline__ctx_type_6 &_ctx, fix16_t x, fix16_t time, fix16_t feedback){
   time = fix_clip(time,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   feedback = fix_clip(feedback,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t index_r;
   index_r = fix_mul(0x3e80000 /* 1000.000000 */,time);
   int index_i;
   index_i = fix_to_int(fix_floor(index_r));
   int delta;
   delta = (_ctx.write_pos + (- index_i));
   int read_pos;
   if(delta < 0){
      read_pos = (1000 + delta);
   }
   else
   {
      read_pos = delta;
   }
   fix16_t decimal;
   decimal = (index_r + (- int_to_fix(index_i)));
   fix16_t x1;
   x1 = fix_get(_ctx.buffer,read_pos);
   fix16_t x2;
   x2 = fix_get(_ctx.buffer,((1 + read_pos) % 1000));
   fix16_t ret;
   ret = (x1 + fix_mul(decimal,(x2 + (- x1))));
   _ctx.write_pos = ((1 + _ctx.write_pos) % 1000);
   fix_set(_ctx.buffer,_ctx.write_pos,Dline_saturate((x + fix_mul(feedback,ret))));
   return ret;
}

void Dline__ctx_type_7_init(Dline__ctx_type_7 &_output_){
   Dline__ctx_type_7 _ctx;
   Dline__ctx_type_6_init(_ctx._inst2d6);
   Dline__ctx_type_5_init(_ctx._inst139);
   _output_ = _ctx;
   return ;
}


