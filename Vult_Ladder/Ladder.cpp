
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Ladder.h"

void Ladder__ctx_type_11_init(Ladder__ctx_type_11 &_output_){
   Ladder__ctx_type_11 _ctx;
   _ctx.p3 = 0x0 /* 0.000000 */;
   _ctx.p2 = 0x0 /* 0.000000 */;
   _ctx.p1 = 0x0 /* 0.000000 */;
   _ctx.p0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Ladder_heun(Ladder__ctx_type_11 &_ctx, fix16_t input, fix16_t fh, fix16_t res){
   fix16_t wt0;
   wt0 = Ladder_cubic_clipper((input + (- (fix_mul(_ctx.p3,res) << 2))));
   fix16_t wt1;
   wt1 = Ladder_cubic_clipper(_ctx.p0);
   fix16_t dpt0;
   dpt0 = fix_mul(fh,(wt0 + (- wt1)));
   fix16_t wt3;
   wt3 = Ladder_cubic_clipper(_ctx.p1);
   fix16_t dpt1;
   dpt1 = fix_mul(fh,(wt1 + (- wt3)));
   fix16_t wt5;
   wt5 = Ladder_cubic_clipper(_ctx.p2);
   fix16_t dpt2;
   dpt2 = fix_mul(fh,(wt3 + (- wt5)));
   fix16_t wt7;
   wt7 = Ladder_cubic_clipper(_ctx.p3);
   fix16_t dpt3;
   dpt3 = fix_mul(fh,(wt5 + (- wt7)));
   fix16_t pt0;
   pt0 = (_ctx.p0 + dpt0);
   fix16_t pt1;
   pt1 = (_ctx.p1 + dpt1);
   fix16_t pt2;
   pt2 = (_ctx.p2 + dpt2);
   fix16_t pt3;
   pt3 = (_ctx.p3 + dpt3);
   fix16_t w0;
   w0 = Ladder_cubic_clipper((input + (- (fix_mul(pt3,res) << 2))));
   fix16_t w1;
   w1 = Ladder_cubic_clipper(pt0);
   fix16_t dp0;
   dp0 = fix_mul(fh,(w0 + (- w1)));
   fix16_t w3;
   w3 = Ladder_cubic_clipper(pt1);
   fix16_t dp1;
   dp1 = fix_mul(fh,(w1 + (- w3)));
   fix16_t w5;
   w5 = Ladder_cubic_clipper(pt2);
   fix16_t dp2;
   dp2 = fix_mul(fh,(w3 + (- w5)));
   fix16_t w7;
   w7 = Ladder_cubic_clipper(pt3);
   fix16_t dp3;
   dp3 = fix_mul(fh,(w5 + (- w7)));
   _ctx.p0 = (_ctx.p0 + ((dp0 + dpt0) >> 1));
   _ctx.p1 = (_ctx.p1 + ((dp1 + dpt1) >> 1));
   _ctx.p2 = (_ctx.p2 + ((dp2 + dpt2) >> 1));
   _ctx.p3 = (_ctx.p3 + ((dp3 + dpt3) >> 1));
   return _ctx.p3;
}

void Ladder__ctx_type_12_init(Ladder__ctx_type_12 &_output_){
   Ladder__ctx_type_12 _ctx;
   _ctx.p3 = 0x0 /* 0.000000 */;
   _ctx.p2 = 0x0 /* 0.000000 */;
   _ctx.p1 = 0x0 /* 0.000000 */;
   _ctx.p0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Ladder_euler(Ladder__ctx_type_12 &_ctx, fix16_t input, fix16_t fh, fix16_t res){
   fix16_t w0;
   w0 = Ladder_cubic_clipper((input + (- (fix_mul(_ctx.p3,res) << 2))));
   fix16_t w1;
   w1 = Ladder_cubic_clipper(_ctx.p0);
   fix16_t dpt0;
   dpt0 = fix_mul(fh,(w0 + (- w1)));
   fix16_t w3;
   w3 = Ladder_cubic_clipper(_ctx.p1);
   fix16_t dpt1;
   dpt1 = fix_mul(fh,(w1 + (- w3)));
   fix16_t w5;
   w5 = Ladder_cubic_clipper(_ctx.p2);
   fix16_t dpt2;
   dpt2 = fix_mul(fh,(w3 + (- w5)));
   fix16_t w7;
   w7 = Ladder_cubic_clipper(_ctx.p3);
   fix16_t dpt3;
   dpt3 = fix_mul(fh,(w5 + (- w7)));
   _ctx.p0 = (_ctx.p0 + dpt0);
   _ctx.p1 = (_ctx.p1 + dpt1);
   _ctx.p2 = (_ctx.p2 + dpt2);
   _ctx.p3 = (_ctx.p3 + dpt3);
   return _ctx.p3;
}

void Ladder__ctx_type_13_init(Ladder__ctx_type_13 &_output_){
   Ladder__ctx_type_13 _ctx;
   _ctx.fh = 0x0 /* 0.000000 */;
   Ladder__ctx_type_12_init(_ctx.e);
   Ladder__ctx_type_0_init(_ctx._inst1f5);
   _output_ = _ctx;
   return ;
}

fix16_t Ladder_process_euler(Ladder__ctx_type_13 &_ctx, fix16_t input, fix16_t cut, fix16_t res){
   if(Ladder_change(_ctx._inst1f5,cut)){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   fix16_t out;
   out = Ladder_euler(_ctx.e,input,_ctx.fh,res);
   return out;
}

void Ladder__ctx_type_14_init(Ladder__ctx_type_14 &_output_){
   Ladder__ctx_type_14 _ctx;
   Ladder__ctx_type_11_init(_ctx.h);
   _ctx.fh = 0x0 /* 0.000000 */;
   Ladder__ctx_type_0_init(_ctx._inst1f5);
   _output_ = _ctx;
   return ;
}

fix16_t Ladder_process_heun(Ladder__ctx_type_14 &_ctx, fix16_t input, fix16_t cut, fix16_t res){
   if(Ladder_change(_ctx._inst1f5,cut)){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   fix16_t out;
   out = Ladder_heun(_ctx.h,input,_ctx.fh,res);
   return out;
}


