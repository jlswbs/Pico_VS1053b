/*

  Based to Logistic equation

  Pot1 = chaos constant
  Pot2 = instruments
  Pot3 = tempo

  Channel 1-6 notes 
  Channel 10 drums
 
  Created by JLS 2023

*/

#include "hardware/structs/rosc.h"
#include "PicoSPI.h"

#define MP3_CLK   2
#define MP3_MOSI  3
#define MP3_MISO  4
#define MP3_CS    5
#define MP3_XDCS  17
#define MP3_DREQ  26
#define MP3_RST   13

#define SCI_MODE          0x00
#define SCI_STATUS        0x01
#define SCI_BASS          0x02
#define SCI_CLOCKF        0x03
#define SCI_DECODE_TIME   0x04
#define SCI_AUDATA        0x05
#define SCI_WRAM          0x06
#define SCI_WRAMADDR      0x07
#define SCI_HDAT0         0x08
#define SCI_HDAT1         0x09
#define SCI_AIADDR        0x0A
#define SCI_VOL           0x0B
#define SCI_AICTRL0       0x0C
#define SCI_AICTRL1       0x0D
#define SCI_AICTRL2       0x0E
#define SCI_AICTRL3       0x0F

#define SM_DIFF           0x00
#define SM_LAYER12        0x01
#define SM_RESET          0x02
#define SM_CANCEL         0x03
#define SM_EARSPEAKER_LO  0x04
#define SM_TESTS          0x05
#define SM_STREAM         0x06
#define SM_EARSPEAKER_HI  0x07
#define SM_DACT           0x08
#define SM_SDIORD         0x09
#define SM_SDISHARE       0x0A
#define SM_SDINEW         0x0B
#define SM_ADPCM          0x0C
#define SM_ADPCM_HP       0x0D
#define SM_LINE1          0x0E
#define SM_CLK_RANGE      0x0F

#define MAXTEMPO  14    // 350 BPM 16th note
#define MINTEMPO  111   // 45 BPM 16th note
#define POLY      6     // note polyphony
#define MAXADC    4095  // max ADC value
#define MINADC    0     // min ADC value

  float x[POLY];
  float nx[POLY];
  uint8_t xout[POLY];
  uint8_t notes;
  uint8_t prog;
  uint8_t vol;

static inline void seed_random_from_rosc(){
  
  uint32_t random = 0;
  uint32_t random_bit;
  volatile uint32_t *rnd_reg = (uint32_t *)(ROSC_BASE + ROSC_RANDOMBIT_OFFSET);

  for (int k = 0; k < 32; k++) {
    while (1) {
      random_bit = (*rnd_reg) & 1;
      if (random_bit != ((*rnd_reg) & 1)) break;
    }

    random = (random << 1) | random_bit;
  }
  
  srand(random);
}

void WriteReg(unsigned char address, unsigned char highbyte, unsigned char lowbyte){
  
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, LOW);
  PicoSPI0.transfer(0x02);
  PicoSPI0.transfer(address);
  PicoSPI0.transfer(highbyte);
  PicoSPI0.transfer(lowbyte);
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, HIGH);
  
}

void WriteReg16(unsigned char address, unsigned int databyte){
  
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, LOW);
  PicoSPI0.transfer(0x02);
  PicoSPI0.transfer(address);
  PicoSPI0.transfer((databyte >> 8) & 0xFF);
  PicoSPI0.transfer(databyte & 0xFF);
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, HIGH);
  
}

unsigned int ReadReg(unsigned char address){
  
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, LOW);
  PicoSPI0.transfer(0x03);
  PicoSPI0.transfer(address);
  char response1 = PicoSPI0.transfer(0xFF);
  while(!digitalRead(MP3_DREQ));
  char response2 = PicoSPI0.transfer(0xFF);
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, HIGH);
  int resultvalue = response1 << 8;
  resultvalue |= response2;
  return resultvalue;
  
}

void note_on(byte chan, byte inst, byte note, byte vol){

  WriteReg16(SCI_MODE, 0x0c00);

  PicoSPI0.transfer(0xC0 | chan);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(inst);
  PicoSPI0.transfer(0x00);
  
  PicoSPI0.transfer(0x90 | chan);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(note);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(vol);
  PicoSPI0.transfer(0x00);

}

void note_off(byte chan, byte note){

  WriteReg16(SCI_MODE, 0x0c00);

  PicoSPI0.transfer(0x80 | chan);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(note);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(0x00);
  
}

void reverb(byte chan, byte typ, byte rev){
  
  WriteReg16(SCI_MODE, 0x0c00);

  PicoSPI0.transfer(0xB0 | chan);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(0x5B);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(rev);
  PicoSPI0.transfer(0x00);
  
  PicoSPI0.transfer(0xB0 | chan);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(0x0C);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(typ);
  PicoSPI0.transfer(0x00);

}

void panning(byte chan, byte pan){
  
  WriteReg16(SCI_MODE, 0x0c00);

  PicoSPI0.transfer(0xB0 | chan);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(0x0A);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(pan);
  PicoSPI0.transfer(0x00);

}

void all_sound_off(byte chan){
  
  WriteReg16(SCI_MODE, 0x0c00);
  
  PicoSPI0.transfer(0xB0 | chan);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(0x78);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(0xFF);
  PicoSPI0.transfer(0x00);

}

void pitch(byte chan, byte pitch){

  WriteReg16(SCI_MODE, 0x0c00);

  PicoSPI0.transfer(0xE0 | chan);
  PicoSPI0.transfer(0x00);
  PicoSPI0.transfer(pitch);
  PicoSPI0.transfer(0x00);

}

void SetVolume(unsigned char left, unsigned char right){ WriteReg(SCI_VOL, left, right); }


const static word plugin[1039] PROGMEM = { /* Compressed plugin */
  0x0007,0x0001, /*copy 1*/
  0x8050,
  0x0006,0x03f0, /*copy 1008*/
  0x2800,0x8080,0x0006,0x2016,0xf400,0x4095,0x0006,0x0017,
  0x3009,0x1c40,0x3009,0x1fc2,0x6020,0x0024,0x0000,0x1fc2,
  0x2000,0x0000,0xb020,0x4542,0x3613,0x0024,0x0006,0x0057,
  0x3e15,0x1c15,0x0020,0x1fd4,0x3580,0x3802,0xf204,0x3804,
  0x0fff,0xfe44,0xa244,0x1804,0xf400,0x4094,0x2800,0x1985,
  0x3009,0x1bc2,0xf400,0x4500,0x2000,0x0000,0x36f5,0x3c15,
  0x3009,0x3857,0x2800,0x1b40,0x0030,0x0457,0x3009,0x3857,
  0x0030,0x0a57,0x3e14,0xf806,0x3701,0x8024,0x0006,0x0017,
  0x3e04,0x9c13,0x0020,0x1fd2,0x3b81,0x8024,0x36f4,0xbc13,
  0x36f4,0xd806,0x0030,0x0717,0x2100,0x0000,0x3f05,0xdbd7,
  0x0030,0xf80f,0x0000,0x1f0e,0x2800,0x7680,0x0000,0x004d,
  0xf400,0x4595,0x3e00,0x17cc,0x3505,0xf802,0x3773,0x0024,
  0x3763,0x0024,0x3700,0x0024,0x0000,0x09c2,0x6024,0x0024,
  0x3600,0x1802,0x2830,0xf855,0x0000,0x004d,0x2800,0x2240,
  0x36f3,0x0024,0x3613,0x0024,0x3e12,0xb817,0x3e12,0x3815,
  0x3e05,0xb814,0x3625,0x0024,0x0000,0x800a,0x3e10,0x3801,
  0x3e10,0xb803,0x3e11,0x3810,0x3e04,0x7812,0x34c3,0x0024,
  0x3440,0x0024,0x4080,0x0024,0x001b,0x3301,0x2800,0x2c85,
  0x0000,0x0180,0x0000,0x0551,0x0000,0xaf02,0x293c,0x1f40,
  0x0007,0xffc1,0xb010,0x134c,0x0018,0x0001,0x4010,0x10d0,
  0x0007,0xffc1,0xfe20,0x020c,0x0000,0x0591,0x48b6,0x0024,
  0x4dd6,0x0024,0x0001,0x2202,0x293c,0x1f40,0x4380,0x2003,
  0xb010,0x134c,0x0018,0x0001,0x4010,0x1010,0xfe20,0x020c,
  0x48b6,0x844c,0x4dd6,0x0024,0xb880,0x2003,0x3434,0x0024,
  0x2800,0x5280,0x3083,0x0024,0x001c,0xccc2,0x0000,0x05d1,
  0x34d3,0x0024,0x3404,0x0024,0x3404,0x420c,0x3001,0x05cc,
  0xa408,0x044c,0x3100,0x0024,0x6010,0x0024,0xfe20,0x0024,
  0x48b6,0x0024,0x4dd6,0x0024,0x4310,0x0024,0x4488,0x2400,
  0x0000,0x0551,0x2800,0x3295,0x3404,0x0024,0xf290,0x00cc,
  0x3800,0x0024,0x3434,0x0024,0x3073,0x0024,0x3013,0x0024,
  0x2800,0x4340,0x3800,0x0024,0x3083,0x0024,0x3000,0x0024,
  0x6402,0x0024,0x0000,0x1001,0x2800,0x3618,0x0018,0x0002,
  0x3434,0x4024,0x3133,0x0024,0x3100,0x0024,0xfe20,0x0024,
  0x48b6,0x0024,0x4dd6,0x0024,0x2800,0x4340,0x3900,0xc024,
  0x4010,0x1011,0x6402,0x0024,0x0000,0x0590,0x2800,0x3918,
  0x0000,0x0024,0xf290,0x04cc,0x3900,0x0024,0x3434,0x0024,
  0x3073,0x0024,0x3013,0x0024,0x2800,0x4340,0x3800,0x0024,
  0x3183,0x0024,0x3100,0x0024,0x6402,0x0024,0x0000,0x1001,
  0x2800,0x3c98,0x0019,0x9982,0x3434,0x0024,0x3033,0x0024,
  0x3000,0x0024,0xfe20,0x0024,0x48b6,0x0024,0x4dd6,0x0024,
  0x2800,0x4340,0x3800,0xc024,0x4010,0x0024,0x6402,0x0024,
  0x001d,0x7082,0x2800,0x4198,0x0000,0x0024,0xf290,0x1010,
  0x3033,0x0024,0x3800,0x0024,0x3404,0x0024,0x3073,0x0024,
  0x3013,0x0024,0x3800,0x0024,0x0004,0x4d50,0x3010,0x0024,
  0x30f0,0x4024,0x3434,0x4024,0x3143,0x0024,0x3910,0x0024,
  0x2800,0x4340,0x39f0,0x4024,0x3434,0x0024,0x3033,0x0024,
  0x3000,0x0024,0xfe20,0x0024,0x48b6,0x0024,0x4dd6,0x0024,
  0x3800,0xc024,0x001e,0x9982,0x0001,0x1012,0x0000,0x0381,
  0x34d3,0x184c,0x3444,0x0024,0x3073,0x0024,0x3013,0x0024,
  0x3000,0x0024,0xfe20,0x0024,0x48b6,0x0024,0x4dd6,0x0024,
  0x4380,0x3003,0x3400,0x0024,0x293d,0x2900,0x3e00,0x0024,
  0x3009,0x33c0,0x293b,0xc540,0x0010,0x0004,0x34d3,0x184c,
  0x3444,0x0024,0x3073,0x13c0,0x3073,0x0024,0x293b,0xf880,
  0x0001,0x1011,0x0001,0x0010,0x0001,0x1011,0x34d3,0x184c,
  0x3430,0x0024,0x4010,0x0024,0x0000,0x05c1,0x3e10,0x0024,
  0x293b,0xac80,0x0006,0x0092,0x0000,0x05d1,0x36f3,0x134c,
  0x3404,0x0024,0x3083,0x0024,0x3000,0x0024,0x6012,0x0024,
  0x0013,0x3304,0x2800,0x5198,0x0001,0xc682,0x0000,0x0500,
  0x0001,0x0012,0x3404,0x584c,0x3133,0x0024,0x3100,0x4024,
  0x0000,0x05d1,0xfe22,0x0024,0x48b6,0x0024,0x4dd6,0x0024,
  0x3e10,0xc024,0x3430,0x8024,0x4204,0x0024,0x293b,0xb580,
  0x3e00,0x8024,0x36e3,0x134c,0x3434,0x0024,0x3083,0x0024,
  0x3000,0x0024,0x6090,0x0024,0x3800,0x1812,0x36f4,0x4024,
  0x36f1,0x1810,0x36f0,0x9803,0x36f0,0x1801,0x3405,0x9014,
  0x36f3,0x0024,0x36f2,0x1815,0x2000,0x0000,0x36f2,0x9817,
  0x3613,0x0024,0x3e12,0xb817,0x3e12,0x3815,0x3e05,0xb814,
  0x3615,0x0024,0x0000,0x800a,0x3e10,0x3801,0x3e10,0xb804,
  0x3e01,0x7810,0x0008,0x04d0,0x2900,0x1480,0x3001,0x0024,
  0x4080,0x03cc,0x3000,0x0024,0x2800,0x7485,0x4090,0x0024,
  0x0000,0x0024,0x2800,0x6245,0x0000,0x0024,0x0000,0x0081,
  0x3000,0x0024,0x6012,0x0024,0x0000,0x0401,0x2800,0x70c5,
  0x0000,0x0024,0x6012,0x0024,0x0000,0x0024,0x2800,0x6645,
  0x0000,0x0024,0x2900,0x1680,0x0000,0x0024,0x4088,0x008c,
  0x0000,0x2000,0x6400,0x0024,0x0000,0x3c00,0x2800,0x5ed8,
  0x0000,0x0024,0x2800,0x6300,0x3801,0x0024,0x6400,0x038c,
  0x0000,0x0024,0x2800,0x6318,0x0000,0x0024,0x3013,0x0024,
  0x2900,0x1480,0x3801,0x0024,0x4080,0x0024,0x0000,0x0024,
  0x2800,0x6255,0x0000,0x0024,0x6890,0x03cc,0x2800,0x7480,
  0x3800,0x0024,0x2900,0x1680,0x0008,0x0510,0x3800,0x0024,
  0x0000,0x3c00,0x6400,0x0024,0x003f,0xff00,0x2800,0x6b08,
  0x0000,0x0024,0x0000,0x3fc0,0x6400,0x0024,0x0000,0x3c00,
  0x2800,0x73c5,0x6400,0x0024,0x0000,0x0024,0x2800,0x73d5,
  0x0000,0x0024,0xb880,0x184c,0x2900,0x1480,0x3009,0x3800,
  0x4082,0x9bc0,0x6014,0x0024,0x0000,0x3c04,0x2800,0x6941,
  0x0000,0x3dc1,0x2900,0x1680,0x0000,0x0024,0xf400,0x4004,
  0x0000,0x3dc1,0x6412,0x0024,0x0008,0x0490,0x2800,0x6a85,
  0x0000,0x0000,0x0000,0x0400,0x2800,0x7480,0x3800,0x0024,
  0x0008,0x04d0,0x3001,0x4024,0xa50a,0x0024,0x0000,0x03c0,
  0xb50a,0x0024,0x0000,0x0300,0x6500,0x0024,0x0000,0x0024,
  0x2900,0x1488,0x0000,0x6f48,0x0000,0x0380,0x6500,0x0024,
  0x0000,0x0024,0x2800,0x7195,0x0000,0x0024,0x2900,0x1480,
  0x0000,0x0024,0x4080,0x03cc,0x0000,0x0080,0x2800,0x70d5,
  0x0000,0x0024,0x2800,0x7480,0x3800,0x0024,0x2900,0x1680,
  0x0000,0x0024,0x408a,0x0024,0x0008,0x0510,0x3613,0x0024,
  0x3e11,0x4024,0x30f0,0x0024,0x3e10,0x0024,0x3000,0x4024,
  0x2931,0xe080,0x3e00,0x4024,0x36d3,0x0024,0x0000,0x0000,
  0x0008,0x0490,0x3800,0x0024,0x36f1,0x5810,0x36f0,0x9804,
  0x36f0,0x1801,0x3405,0x9014,0x36f3,0x0024,0x36f2,0x1815,
  0x2000,0x0000,0x36f2,0x9817,0x0005,0xbe51,0x0001,0x0010,
  0x3613,0x0024,0x3e05,0xb814,0x3635,0x0024,0x0000,0x800a,
  0xb880,0x104c,0xb882,0x33c0,0x2914,0xbec0,0x0004,0xc580,
  0x0019,0x98c0,0x0004,0x4e90,0x3800,0x0024,0x001f,0xff00,
  0x2931,0x6c40,0x3900,0x0024,0x2931,0x6640,0x0000,0x0024,
  0x2900,0x5500,0x0000,0x8001,0x2912,0x0d00,0x3613,0x0024,
  0x6012,0x0024,0x0000,0x8005,0x2800,0x7b18,0x0004,0x4d50,
  0x2912,0x0d00,0x3613,0x108c,0x2934,0x4180,0x3ce0,0x0024,
  0x0000,0x1000,0x3423,0x0024,0x2900,0x0a80,0x34e1,0x0024,
  0xb882,0x0042,0x30f0,0xc024,0x4dc2,0x0024,0x3810,0x0024,
  0x2800,0x7b00,0x38f0,0x4024,0x3e12,0xb817,0x3e12,0x3815,
  0x3e05,0xb814,0x3615,0x0024,0x0000,0x800a,0x3e10,0x3801,
  0x0000,0x0081,0xb880,0xb811,0x0030,0x0291,0x3e14,0x0024,
  0x0030,0x0690,0x3e14,0xb813,0x0030,0x00d3,0x0007,0x9252,
  0x3800,0x0024,0x3910,0x0024,0x3a00,0x0024,0x0000,0xc0c0,
  0x3900,0x0024,0x0030,0x0000,0x0006,0x0051,0x2908,0x6400,
  0x3b00,0x0024,0xb880,0x008c,0x3800,0x0024,0x3800,0x0024,
  0x0003,0x0d40,0x0006,0xc490,0x2908,0x7f80,0x3009,0x2000,
  0x0030,0x0ad0,0x3800,0x184c,0x002b,0x1100,0x3e10,0x0024,
  0x2909,0xa9c0,0x3e10,0x4024,0x000a,0x8001,0x2908,0x7f80,
  0x36e3,0x0024,0xb880,0x2000,0x0006,0x0010,0x3009,0x2410,
  0x0006,0x0011,0x3009,0x2410,0x0008,0x0490,0x3810,0x0024,
  0x3800,0x0024,0x0000,0x0890,0x290f,0xfcc0,0x0006,0x8380,
  0x000a,0x8001,0x0000,0x0950,0x290f,0xfcc0,0x0006,0xb380,
  0x0000,0x09c0,0x0030,0x0690,0x6890,0x2000,0x0030,0x1310,
  0x6890,0x2000,0x0030,0x0490,0x2900,0x1e00,0x3800,0x0024,
  0x36f4,0x9813,0x36f4,0x1811,0x36f0,0x1801,0x3405,0x9014,
  0x36f3,0x0024,0x36f2,0x1815,0x2000,0x0000,0x36f2,0x9817,
  0x0007,0x0001, /*copy 1*/
  0x5800,
  0x0006,0x0004, /*copy 4*/
  0x1800,0x1800,0x98cc,0x7395,
  0x0007,0x0001, /*copy 1*/
  0x8025,
  0x0006,0x0002, /*copy 2*/
  0x2a00,0x1ace,
  0x0007,0x0001, /*copy 1*/
  0x8022,
  0x0006,0x0002, /*copy 2*/
  0x2a00,0x1a0e,0x000a,0x0001,0x0050,};

#define PLUGIN_SIZE 1039

void load_code(void){
  
  int i = 0;
  while (i< PLUGIN_SIZE) {
    word addr, n, val;
    addr = pgm_read_word (&(plugin[i++]));
    n = pgm_read_word (&(plugin[i++]));
    if (n & 0x8000U) {
      n &= 0x7FFF;
      val = pgm_read_word (&(plugin[i++]));
      while (n--) {
        WriteReg16(addr, val);       
      }
    } 
    else {
      while (n--) {
        val = pgm_read_word (&(plugin[i++]));
        WriteReg16(addr, val);        
      }
    }
  }
  return;
}

void setup(){

  seed_random_from_rosc();
  analogReadResolution(12);
    
  pinMode(MP3_DREQ, INPUT);
  pinMode(MP3_CS, OUTPUT);
  pinMode(MP3_XDCS, OUTPUT);
  pinMode(MP3_RST, OUTPUT);

  PicoSPI0.configure (MP3_CLK, MP3_MOSI, MP3_MISO, MP3_CS, 8000000, 0, true);
  PicoSPI0.transfer(0xFF);

  digitalWrite(MP3_RST, HIGH);
  digitalWrite(MP3_CS, HIGH);
  digitalWrite(MP3_XDCS, HIGH);

  load_code();

  SetVolume(65, 65); // Set initial volume (20 = -10dB)
  WriteReg16(SCI_CLOCKF, 0x8BE8); // Set multiplier to 3.5x

  uint8_t room = 0;

  reverb(0, room, 96);
  reverb(1, room, 96);
  reverb(2, room, 96);
  reverb(3, room, 96);
  reverb(4, room, 96);
  reverb(5, room, 96);

  panning(0, 32);
  panning(1, 96);
  panning(2, 48);
  panning(3, 80);
  panning(4, 40);
  panning(5, 88);

  for (int i = 0; i < POLY; i++) x[i] = 0.1f;

}

void loop(){

  float r = map(analogRead(A1), MINADC, MAXADC, 35000, 39900);
  r /= 10000.0f;  

  for (int i = 0; i < POLY; i++){

    r += 0.01f;
    nx[i] = x[i];
    x[i] = r * nx[i] * (1.0f - nx[i]);
    xout[i] = 127.0f * x[i];
             
    //MIDI.sendProgramChange(rand()%128, 1+i);
   
  }

  char t = 0;

  for (int i = 0; i < POLY; i++) t ^= (char)(xout[i]);

  for (int i = 0; i < POLY; i++){  
  
    vol = map(xout[i], 0, 127, 32, 96);
    prog = map(analogRead(A2), 0, MAXADC, 0, xout[i]);
    if (prog >= 18 && prog <= 23) prog = 0; // replace some instruments to grand piano
    notes = map(xout[i], 0, 127, 12, 28 + (xout[i] / 2)); // quantise note
    if(bitRead(t, i)) note_on(i, prog & 123, notes & 127, vol & 127);

  }
 
  uint8_t drum = map(t & 127, 0, 127, 35, 66); // note 27-87 drum kit
  uint8_t vold = map(t, 0, 127, 48, 88);
  note_on(9, 0, drum & 127, vold & 127);

  uint8_t delay_ms = map(analogRead(A3), MINADC, MAXADC, MINTEMPO, MAXTEMPO);

  delay(2 * delay_ms);

  uint8_t rel_off = t % 6;
  
  if(rel_off == 0) all_sound_off(0);
  if(rel_off == 1) all_sound_off(1);
  if(rel_off == 2) all_sound_off(2);
  if(rel_off == 3) all_sound_off(3);
  if(rel_off == 4) all_sound_off(4);
  if(rel_off == 5) all_sound_off(5);

  delay (delay_ms);

}
