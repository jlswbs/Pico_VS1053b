#include "hardware/structs/rosc.h"
#include "PicoSPI.h"

#define MP3_CLK   2
#define MP3_MOSI  3
#define MP3_MISO  4
#define MP3_CS    5
#define MP3_XDCS  17
#define MP3_DREQ  26
#define MP3_RST   13

#define SCI_MODE          0x00
#define SCI_STATUS        0x01
#define SCI_BASS          0x02
#define SCI_CLOCKF        0x03
#define SCI_DECODE_TIME   0x04
#define SCI_AUDATA        0x05
#define SCI_WRAM          0x06
#define SCI_WRAMADDR      0x07
#define SCI_HDAT0         0x08
#define SCI_HDAT1         0x09
#define SCI_AIADDR        0x0A
#define SCI_VOL           0x0B
#define SCI_AICTRL0       0x0C
#define SCI_AICTRL1       0x0D
#define SCI_AICTRL2       0x0E
#define SCI_AICTRL3       0x0F

#define SM_DIFF           0x00
#define SM_LAYER12        0x01
#define SM_RESET          0x02
#define SM_CANCEL         0x03
#define SM_EARSPEAKER_LO  0x04
#define SM_TESTS          0x05
#define SM_STREAM         0x06
#define SM_EARSPEAKER_HI  0x07
#define SM_DACT           0x08
#define SM_SDIORD         0x09
#define SM_SDISHARE       0x0A
#define SM_SDINEW         0x0B
#define SM_ADPCM          0x0C
#define SM_ADPCM_HP       0x0D
#define SM_LINE1          0x0E
#define SM_CLK_RANGE      0x0F

#define SAMPLE_RATE       22050

int frameTime = 15; // ms
int formantScale = 64;

const int FIXED_BITS = 14;
const int FIXED_SCALE = (1 << FIXED_BITS);
const int REVERB_SIZE = 0x2000;
const int REVERB_LENGTH = (int)(REVERB_SIZE * 0.9f);
const int REVERB_DECAY = (int)(FIXED_SCALE * 0.7f);

int16_t reverbAddr;
int reverbBuffer[REVERB_SIZE];

uint16_t pitchPhase, form1Phase,form2Phase,form3Phase;
uint16_t pitchPhaseInc,form1PhaseInc,form2PhaseInc,form3PhaseInc;
uint8_t form1Amp,form2Amp,form3Amp;

int8_t sinCalc[256] PROGMEM = {
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,2,2,3,3,4,5,6,7,8,10,12,14,17,20,24,
  0,4,4,5,6,7,9,11,13,15,18,22,26,31,37,45,
  0,5,6,7,8,10,12,14,17,20,24,28,34,41,49,58,
  0,5,6,7,9,10,12,15,18,21,26,31,37,44,53,63,
  0,5,6,7,8,10,12,14,17,20,24,28,34,41,49,58,
  0,4,4,5,6,7,9,11,13,15,18,22,26,31,37,45,
  0,2,2,3,3,4,5,6,7,8,10,12,14,17,20,24,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,-2,-2,-3,-3,-4,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24,
  0,-4,-4,-5,-6,-7,-9,-11,-13,-15,-18,-22,-26,-31,-37,-45,
  0,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24,-28,-34,-41,-49,-58,
  0,-5,-6,-7,-9,-10,-12,-15,-18,-21,-26,-31,-37,-44,-53,-63,
  0,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24,-28,-34,-41,-49,-58,
  0,-4,-4,-5,-6,-7,-9,-11,-13,-15,-18,-22,-26,-31,-37,-45,
  0,-2,-2,-3,-3,-4,-5,-6,-7,-8,-10,-12,-14,-17,-20,-24
};

int8_t sqrCalc[256] PROGMEM ={
  0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
  0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
  0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
  0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
  0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
  0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
  0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
  0,1,2,2,2,3,3,4,5,5,6,8,9,11,13,16,
  0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
  0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
  0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
  0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
  0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
  0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
  0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16,
  0,-1,-2,-2,-2,-3,-3,-4,-5,-5,-6,-8,-9,-11,-13,-16
};

#define FORMANT_SZ 7

enum {
  SP,DOT,QM,COM,HYP,IY,IH,EH,AE,AA,
  AH,AO,UH,AX,IX,ER,UX,OH,RX,LX,
  WX,YX,WH,R,L,W,Y,M,N,NX,
  DX,Q,S,SH,F,TH,H,X,Z,ZH,
  V,DH,CHa,CHb,Ja,Jb,Jc,Jd,EY,AY,
  OY,AW,OW,UW,Ba,Bb,Bc,Da,Db,Dc,
  Ga,Gb,Gc,GXa,GXb,GXc,Pa,Pb,Pc,Ta,
  Tb,Tc,Ka,Kb,Kc,KXa,KXb,KXc
};

uint8_t formantTable[] PROGMEM = {
   0x0, 0x0, 0x0,0x0,0x0,0x0,0x0,/*00 space*/ 0x13,0x43,0x5b,0x0,0x0,0x0,0x0,/*01 .*/
  0x13,0x43,0x5b,0x0,0x0,0x0,0x0,/*02 ?*/     0x13,0x43,0x5b,0x0,0x0,0x0,0x0,/*03 ,*/
  0x13,0x43,0x5b,0x0,0x0,0x0,0x0,/*04 -*/      0xa,0x54,0x6e,0xd,0xa,0x8,0x0,/*05 IY*/
   0xe,0x49,0x5d,0xd,0x8,0x7,0x0,/*06 IH*/    0x13,0x43,0x5b,0xe,0xd,0x8,0x0,/*07 EH*/
  0x18,0x3f,0x58,0xf,0xe,0x8,0x0,/*08 AE*/    0x1b,0x28,0x59,0xf,0xd,0x1,0x0,/*09 AA*/
  0x17,0x2c,0x57,0xf,0xc,0x1,0x0,/*10 AH*/    0x15,0x1f,0x58,0xf,0xc,0x0,0x0,/*11 AO*/
  0x10,0x25,0x52,0xf,0xb,0x1,0x0,/*12 UH*/    0x14,0x2c,0x57,0xe,0xb,0x0,0x0,/*13 AX*/
   0xe,0x49,0x5d,0xd,0xb,0x7,0x0,/*14 IX*/    0x12,0x31,0x3e,0xc,0xb,0x5,0x0,/*15 ER*/
   0xe,0x24,0x52,0xf,0xc,0x1,0x0,/*16 UX*/    0x12,0x1e,0x58,0xf,0xc,0x0,0x0,/*17 OH*/
  0x12,0x33,0x3e,0xd,0xc,0x6,0x0,/*18 RX*/    0x10,0x25,0x6e,0xd,0x8,0x1,0x0,/*19 LX*/
   0xd,0x1d,0x50,0xd,0x8,0x0,0x0,/*20 WX*/     0xf,0x45,0x5d,0xe,0xc,0x7,0x0,/*21 YX*/
   0xb,0x18,0x5a,0xd,0x8,0x0,0x0,/*22 WH*/    0x12,0x32,0x3c,0xc,0xa,0x5,0x0,/*23 R*/
   0xe,0x1e,0x6e,0xd,0x8,0x1,0x0,/*24 L*/      0xb,0x18,0x5a,0xd,0x8,0x0,0x0,/*25 W*/
   0x9,0x53,0x6e,0xd,0xa,0x8,0x0,/*26 Y*/      0x6,0x2e,0x51,0xc,0x3,0x0,0x0,/*27 M*/
   0x6,0x36,0x79,0x9,0x9,0x0,0x0,/*28 N*/      0x6,0x56,0x65,0x9,0x6,0x3,0x0,/*29 NX*/
   0x6,0x36,0x79,0x0,0x0,0x0,0x0,/*30 DX*/    0x11,0x43,0x5b,0x0,0x0,0x0,0x0,/*31 Q*/
   0x6,0x49,0x63,0x7,0xa,0xd,0xf,/*32 S*/      0x6,0x4f,0x6a,0x0,0x0,0x0,0x0,/*33 SH*/
   0x6,0x1a,0x51,0x3,0x3,0x3,0xf,/*34 F*/      0x6,0x42,0x79,0x0,0x0,0x0,0x0,/*35 TH*/
   0xe,0x49,0x5d,0x0,0x0,0x0,0x0,/*36 /H*/    0x10,0x25,0x52,0x0,0x0,0x0,0x0,/*37 /X*/
   0x9,0x33,0x5d,0xf,0x3,0x0,0x3,/*38 Z*/      0xa,0x42,0x67,0xb,0x5,0x1,0x0,/*39 ZH*/
   0x8,0x28,0x4c,0xb,0x3,0x0,0x0,/*40 V*/      0xa,0x2f,0x5d,0xb,0x4,0x0,0x0,/*41 DH*/
   0x6,0x4f,0x65,0x0,0x0,0x0,0x0,/*42 CHa*/    0x6,0x4f,0x65,0x0,0x0,0x0,0x0,/*43 CHb*/
   0x6,0x42,0x79,0x1,0x0,0x0,0x0,/*44 Ja*/     0x5,0x42,0x79,0x1,0x0,0x0,0x0,/*45 Jb*/
   0x6,0x6e,0x79,0x0,0xa,0xe,0x0,/*46 Jc*/     0x0, 0x0, 0x0,0x2,0x2,0x1,0x0,/*47 Jd*/
  0x13,0x48,0x5a,0xe,0xe,0x9,0x0,/*48 EY*/    0x1b,0x27,0x58,0xf,0xd,0x1,0x0,/*49 AY*/
  0x15,0x1f,0x58,0xf,0xc,0x0,0x0,/*50 OY*/    0x1b,0x2b,0x58,0xf,0xd,0x1,0x0,/*51 AW*/
  0x12,0x1e,0x58,0xf,0xc,0x0,0x0,/*52 OW*/     0xd,0x22,0x52,0xd,0x8,0x0,0x0,/*53 UW*/
   0x6,0x1a,0x51,0x2,0x0,0x0,0x0,/*54 Ba*/     0x6,0x1a,0x51,0x4,0x1,0x0,0xf,/*55 Bb*/
   0x6,0x1a,0x51,0x0,0x0,0x0,0x0,/*56 Bc*/     0x6,0x42,0x79,0x2,0x0,0x0,0x0,/*57 Da*/
   0x6,0x42,0x79,0x4,0x1,0x0,0xf,/*58 Db*/     0x6,0x42,0x79,0x0,0x0,0x0,0x0,/*59 Dc*/
   0x6,0x6e,0x70,0x1,0x0,0x0,0x0,/*60 Ga*/     0x6,0x6e,0x6e,0x4,0x1,0x0,0xf,/*61 Gb*/
   0x6,0x6e,0x6e,0x0,0x0,0x0,0x0,/*62 Gc*/     0x6,0x54,0x5e,0x1,0x0,0x0,0x0,/*63 GXa*/
   0x6,0x54,0x5e,0x4,0x1,0x0,0xf,/*64 GXb*/    0x6,0x54,0x5e,0x0,0x0,0x0,0x0,/*65 GXc*/
   0x6,0x1a,0x51,0x0,0x0,0x0,0x0,/*66 Pa*/     0x6,0x1a,0x51,0x0,0x0,0x0,0x0,/*67 Pb*/
   0x6,0x1a,0x51,0x0,0x0,0x0,0x0,/*68 Pc*/     0x6,0x42,0x79,0x0,0x0,0x0,0x0,/*69 Ta*/
   0x6,0x42,0x79,0x0,0x0,0x0,0x0,/*70 Tb*/     0x6,0x42,0x79,0x0,0x0,0x0,0x0,/*71 Tc*/
   0x6,0x6d,0x65,0x0,0x0,0x0,0x0,/*72 Ka*/     0xa,0x56,0x65,0xc,0xa,0x7,0x0,/*73 Kb*/
   0xa,0x6d,0x70,0x0,0x0,0x0,0x0,/*74 Kc*/     0x6,0x54,0x5e,0x0,0x0,0x0,0x0,/*75 KXa*/
   0x6,0x54,0x5e,0x0,0xa,0x5,0x0,/*76 KXb*/    0x6,0x54,0x5e,0x0,0x0,0x0,0x0 /*77 KXc*/
};

uint16_t pitchTable[64] = {
  // Covers A1 to C7
  58,61,65,69,73,77,82,86,92,97,
  103,109,115,122,129,137,145,154,163,173,
  183,194,206,218,231,244,259,274,291,308,
  326,346,366,388,411,435,461,489,518,549,
  581,616,652,691,732,776,822,871,923,978,
  1036,1097,1163,1232,1305,1383,1465,1552,1644,1742,
  1845,1955,2071,2195
};

uint8_t frameList[] PROGMEM = {
#if 1
  Da,3,0,39,Db,1,0,39,Dc,1,3,39,EY,8,6,39,YX,20,3,39, // Dai..
  Z,10,0,36,IY,35,3,36, // ..sy
  Da,3,0,32,Db,1,0,32,Dc,1,3,32,EY,8,6,32,YX,20,3,32, // Dai..
  Z,10,0,27,IY,35,3,27, // ..sy
  Ga,2,0,29,Gb,2,0,29,Gc,2,0,29,IH,10,3,29,V,5,0,29, // Give
  M,2,0,31,IY,10,3,31, // me
  YX,5,0,32,AO,10,0,32,RX,5,0,32, // your
  AH,25,0,29,NX,5,0,29, // an..
  S,2,0,32,ER,10,0,32,RX,3,0,32, // ..swer
  Da,3,0,27,Db,1,0,27,Dc,1,3,27,UX,80,3,27,WX,5,0,27, // do
  AY,5,20,34,YX,10,0,34,M,8,0,34, // I'm
  H,5,0,39,AX,30,0,39,F,10,0,39, // half
  Ka,3,0,36,Kb,3,0,36,Kc,4,0,36,R,5,0,36,EY,30,0,36, // cra..
  Z,5,0,32,IY,40,0,32, // ..zy
  AO,10,0,29,LX,5,0,29, // all
  F,5,0,31,AO,10,0,31, // for
  DH,5,0,32,AH,10,0,32, // the
  L,5,0,34,AH,20,0,34,V,5,0,34,// love
  AA,10,0,36,V,5,0,36,// of
  Y,10,0,34,UX,80,0,34, // you
  IH,10,0,36,Ta,2,0,36,Tb,1,0,36,Tc,2,0,36,// It
  W,2,0,37,OH,10,0,37,N,1,0,37,Ta,1,0,37,Tb,1,0,37,Tc,1,0,37,// won't
  Ba,2,0,36,Bb,1,0,36,Bc,2,0,36,IY,10,0,36,// be
  AH,15,0,34,// a
  S,2,0,39,Ta,2,0,39,Tb,2,0,39,Tc,2,0,39,AY,1,10,39,YX,10,0,39,// sty..
  L,3,0,36,IH,10,0,36,SH,2,0,36,// ..lish
  M,5,0,34,AE,10,0,34,// ma..
  R,5,0,32,IH,60,0,32,Ja,2,0,32,Jb,2,0,32,Jc,2,0,32,// ..rriage
  AY,5,10,34,YX,5,0,34,// I
  Ka,2,0,36,Kb,2,0,36,Kc,2,0,36,AH,20,0,36,N,2,0,36,Ta,2,0,36,Tb,2,0,26,Tc,2,0,36,// can't
  AX,15,0,32,// a..
  F,5,0,29,AO,20,0,29,R,2,0,29,Da,1,0,29,Db,1,0,29,Dc,1,0,29,// ..fford
  AX,15,0,32,// a
  Ka,1,0,29,Kb,1,0,29,Kc,1,0,29,AE,12,0,29,// ca..
  R,5,0,27,IH,45,0,27,Ja,2,0,27,Jb,2,0,27,Jc,2,0,27,// ..rriage
  Ba,1,0,27,Bb,1,0,27,Bc,1,0,27,AH,10,0,27,Ta,1,0,27,Tb,1,0,27,Tc,1,0,27,// but
  Y,5,0,32,UH,10,10,32,L,5,0,32,// you'll
  L,3,0,36,UH,10,0,36,Ka,1,0,36,Kb,1,0,36,Kc,1,0,36,// look
  S,2,0,34,W,2,0,34,IY,20,0,34,Ta,2,0,34,Tb,2,0,34,Tc,2,0,34,// sweet
  AX,15,0,27,// a..
  Ka,2,0,32,Kb,2,0,32,Kc,2,0,32,R,2,0,32,AA,20,0,32,S,5,0,32,// ..cross
  DH,5,0,36,AH,10,0,36,// the
  S,2,0,34,IY,10,0,34,Ta,2,0,34,Tb,2,0,34,Tc,2,0,34,// seat
  AA,10,0,36,V,5,0,36,// of
  AE,15,0,37,// a
  Ba,2,0,39,Bb,2,0,39,Bc,2,0,39,AY,5,5,39,YX,5,0,39,// bi..
  S,5,0,36,IH,10,0,36,// ..cy..
  Ka,2,0,32,Kb,2,0,32,Kc,2,0,32,L,9,0,32,// ..cle
  M,2,0,34,EY,5,10,34,YX,10,0,34,Da,2,0,34,Db,2,0,34,Dc,2,0,34,// made
  F,5,0,27,OY,1,5,27,RX,5,0,27,// for
  Ta,2,0,32,Tb,2,0,32,Tc,2,0,32,UX,50,0,32,// two
  #endif
  Ta,0,0,61
};

static inline void seed_random_from_rosc(){
  
  uint32_t random = 0;
  uint32_t random_bit;
  volatile uint32_t *rnd_reg = (uint32_t *)(ROSC_BASE + ROSC_RANDOMBIT_OFFSET);

  for (int k = 0; k < 32; k++) {
    while (1) {
      random_bit = (*rnd_reg) & 1;
      if (random_bit != ((*rnd_reg) & 1)) break;
    }

    random = (random << 1) | random_bit;
  }
  
  srand(random);
}

void WriteReg(unsigned char address, unsigned char highbyte, unsigned char lowbyte){
  
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, LOW);
  PicoSPI0.transfer(0x02);
  PicoSPI0.transfer(address);
  PicoSPI0.transfer(highbyte);
  PicoSPI0.transfer(lowbyte);
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, HIGH);
  
}

void WriteReg16(unsigned char address, unsigned int databyte){
  
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, LOW);
  PicoSPI0.transfer(0x02);
  PicoSPI0.transfer(address);
  PicoSPI0.transfer((databyte >> 8) & 0xFF);
  PicoSPI0.transfer(databyte & 0xFF);
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, HIGH);
  
}

unsigned int ReadReg(unsigned char address){
  
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, LOW);
  PicoSPI0.transfer(0x03);
  PicoSPI0.transfer(address);
  char response1 = PicoSPI0.transfer(0xFF);
  while(!digitalRead(MP3_DREQ));
  char response2 = PicoSPI0.transfer(0xFF);
  while(!digitalRead(MP3_DREQ));
  digitalWrite(MP3_CS, HIGH);
  int resultvalue = response1 << 8;
  resultvalue |= response2;
  return resultvalue;
  
}

#define PLUGIN_SIZE 840

const static word plugin[PLUGIN_SIZE] PROGMEM = {
  0x0007,0x0001, /*copy 1*/
	0x8d00,
	0x0006,0x033c, /*copy 828*/
	0x2803,0x87c0,0x0000,0x0024,0x3e12,0xb817,0x3e12,0x7808,
	0x3e11,0xb811,0x3e15,0x7810,0x3e18,0xb823,0x3e18,0x3821,
	0x3e10,0x3801,0x48b2,0x0024,0x3e10,0x3801,0x3e11,0x3802,
	0x3009,0x3814,0x2903,0x7200,0x0000,0x0024,0x3009,0x1bd4,
	0x36f1,0x1802,0x36f0,0x1801,0x2210,0x0000,0x36f0,0x1801,
	0x36f8,0x1821,0x36f8,0x9823,0x36f5,0x5810,0x36f1,0x9811,
	0x36f2,0x5808,0x3602,0x8024,0x0030,0x0717,0x2100,0x0000,
	0x3f05,0xdbd7,0x3613,0x0024,0x3e12,0xb817,0x3e12,0x3815,
	0x3e05,0xb814,0x3615,0x0024,0x0000,0x800a,0x3e10,0xb813,
	0xb884,0x4493,0x3a00,0x8c4c,0x4484,0x2c50,0x3b14,0x0024,
	0x3b10,0x7841,0x3b10,0x3800,0x3b11,0x0024,0x2914,0xb200,
	0x3b04,0x4024,0x4084,0x4493,0x3373,0x1bc0,0x3b00,0x9bc1,
	0x36f0,0x9813,0x3405,0x9014,0x36f3,0x0024,0x36f2,0x1815,
	0x2000,0x0000,0x36f2,0x9817,0x3613,0x0024,0x3e22,0xb815,
	0x3e05,0xb814,0x3615,0x0024,0x0000,0x800a,0x3e10,0x3801,
	0x3e11,0x3810,0x0006,0x1850,0x3e14,0x7812,0x0006,0x1891,
	0x3e04,0xc024,0x3001,0x0024,0x3100,0x0024,0x6408,0x0024,
	0x4488,0x0024,0x0000,0x3000,0x2803,0x52d9,0x0000,0x0024,
	0x0000,0x4000,0x4408,0x0024,0x0000,0x3000,0x6400,0x0024,
	0x0006,0x1812,0x2803,0x55d8,0x0000,0x8001,0x0006,0x1912,
	0x0000,0x0000,0x0030,0x0693,0x3a00,0x0024,0x0006,0x1812,
	0x3300,0x0024,0xc012,0x0024,0x3b00,0x4024,0x3200,0x0024,
	0x4080,0x0024,0x0000,0x0800,0x2803,0x5985,0x6400,0x0024,
	0x0030,0x0653,0x3200,0x0024,0x2803,0x58c9,0x3300,0x4024,
	0xc100,0x0024,0x2803,0x5980,0x3b00,0x0024,0xd090,0x0024,
	0xb100,0x0024,0x3b00,0x0024,0x0030,0x0313,0x4490,0x0024,
	0x3b00,0x0024,0x36f4,0xc024,0x36f4,0x5812,0x36f1,0x1810,
	0x36f0,0x1801,0x3405,0x9014,0x36e3,0x0024,0x2000,0x0000,
	0x36f2,0x9815,0x3613,0x0024,0x3e12,0xb817,0x3e12,0x3815,
	0x3e05,0xb814,0x3615,0x0024,0x0000,0x800a,0x3e10,0xb803,
	0x0000,0x00c2,0x3e11,0x3805,0x3e14,0x7812,0x6124,0x3813,
	0x0000,0x0182,0x2803,0x6415,0x003b,0x0003,0x0030,0x0351,
	0x0006,0x1893,0x3100,0x8024,0x3304,0x8024,0x3300,0xa802,
	0x6294,0x0024,0x6238,0x2c02,0x0000,0x0024,0x2903,0x4d91,
	0x0003,0x6388,0x0000,0x4003,0x3300,0x8024,0x6236,0x0024,
	0x2903,0x4d80,0x3b00,0xc024,0x2803,0x6fc0,0x0000,0x0024,
	0x6124,0x0024,0x0000,0x0102,0x2803,0x6595,0x0000,0x0024,
	0x2903,0x4d80,0x0003,0x6fc8,0x6124,0x0024,0x0000,0x3fc2,
	0x2803,0x6fd5,0x0030,0x02d1,0x0000,0x0103,0x3131,0x0024,
	0x3101,0x4024,0xb52a,0x0024,0xb424,0x0024,0x6236,0x0024,
	0x0001,0x0003,0x2803,0x6a51,0x003f,0xc002,0xb424,0x184c,
	0x6236,0x0024,0x0000,0x3fc3,0x2803,0x6b41,0xb434,0x0024,
	0x36f3,0x0024,0x0000,0x3fc3,0x0001,0x0104,0x31d3,0x184c,
	0xb434,0x2404,0xb536,0x0024,0x4234,0x0024,0x0000,0x0303,
	0x6236,0x0024,0x0000,0x0243,0x2803,0x6e81,0x4534,0x0024,
	0x0000,0x0305,0x0000,0x3fc2,0x0030,0x0391,0xb424,0x0024,
	0x652a,0x0024,0x4534,0x2405,0x0006,0x18d1,0x2912,0x1400,
	0x3009,0x3840,0x4084,0x9bc0,0x3900,0x8024,0x36f4,0xc024,
	0x36f4,0x5812,0x36f1,0x1805,0x36f0,0x9803,0x3405,0x9014,
	0x36f3,0x0024,0x36f2,0x1815,0x2000,0x0000,0x36f2,0x9817,
	0x3613,0x0024,0x3e12,0xb817,0x3e12,0x3815,0x3e05,0xb814,
	0x3615,0x0024,0x0000,0x800a,0x3e10,0x3801,0x3e10,0xb803,
	0x3e11,0x3810,0x3e14,0x7812,0x0006,0x1851,0x3e04,0xc024,
	0x3104,0x0024,0x2912,0x1300,0x3009,0x0004,0x0006,0x1610,
	0x3000,0x0024,0x4080,0x0024,0x003b,0x0001,0x2803,0x8115,
	0x0000,0x0024,0x3104,0x804c,0x3004,0xc844,0xf400,0x4480,
	0x0006,0x1890,0x6014,0x2c04,0xf400,0x4480,0x2803,0x79d1,
	0x003f,0xc013,0x3283,0x0024,0xf400,0x4480,0x3000,0x4024,
	0x6014,0x0024,0x0006,0x1913,0x2803,0x8055,0xb880,0x0024,
	0x0000,0xfa01,0x3300,0x0024,0x6090,0x0024,0x6012,0x2c00,
	0x001f,0xae02,0x2803,0x7f09,0x003f,0x7fc1,0x0030,0x0690,
	0x3000,0x0024,0xb012,0x0024,0xb880,0x2001,0x0030,0x1290,
	0x3810,0x0024,0x3800,0x0024,0x2912,0x1180,0x0003,0x8548,
	0xfe28,0x0410,0x48b6,0x0024,0x4dd6,0x0024,0x2803,0x8100,
	0x3009,0x2003,0x3b00,0x0024,0x2903,0x4d80,0x3904,0x8024,
	0x0006,0x1710,0x3000,0x0024,0x4090,0x0024,0x0030,0x1293,
	0x2803,0x83c9,0x0006,0x18d2,0x2903,0x9e40,0x0006,0x1612,
	0xf400,0x4004,0x0006,0x18d2,0x0030,0x1293,0x3200,0x0024,
	0xfe08,0x0024,0x48b2,0x0024,0x4180,0x2c41,0x2912,0x1180,
	0x3b00,0x4024,0x36f4,0xc024,0x36f4,0x5812,0x36f1,0x1810,
	0x36f0,0x9803,0x36f0,0x1801,0x3405,0x9014,0x36f3,0x0024,
	0x36f2,0x1815,0x2000,0x0000,0x36f2,0x9817,0x3613,0x0024,
	0x3e12,0xb817,0x3e12,0x3815,0x3e05,0xb814,0x3615,0x0024,
	0x0000,0x800a,0x3e10,0x3801,0x3e10,0xb803,0x3e11,0x3805,
	0x3e14,0x3811,0x0006,0x1811,0x0030,0x0350,0x3e04,0xb813,
	0x003a,0xc012,0x0006,0x1893,0xb882,0x0000,0x0006,0x1850,
	0x3900,0x0024,0x0000,0x0880,0x3b04,0x8024,0x3804,0x8024,
	0x2914,0xbec0,0x000d,0x6010,0x0030,0x0310,0x0015,0x8881,
	0x3000,0x0024,0x6012,0x0024,0x000a,0xc441,0x2803,0x90d1,
	0x0006,0x1612,0x0000,0x0881,0x0000,0x0004,0x000d,0x6010,
	0x6890,0x4111,0x2903,0x4740,0x0003,0x94c8,0x3000,0x0024,
	0x6012,0x0024,0x0000,0x00c0,0x2803,0x93d1,0x0014,0xe651,
	0x0014,0xffd1,0x0000,0x0881,0x000d,0x6010,0x0000,0x0080,
	0x0000,0x1004,0x2903,0x4740,0x0003,0x94c8,0x0000,0x0881,
	0x000d,0x6010,0x2903,0x4740,0x0000,0x1984,0x0006,0xc610,
	0x0001,0xf402,0x0030,0x0311,0x0006,0x1712,0x3100,0x4003,
	0xff26,0x0800,0x48b6,0x0024,0xff02,0x0024,0x2915,0x8600,
	0x48b2,0x0024,0x0004,0x0001,0x4090,0x0024,0x0030,0x1250,
	0x0006,0x1811,0x0030,0x05d2,0x0003,0x5c53,0xc010,0x0024,
	0x3800,0x0024,0x0007,0x9250,0x3100,0x0024,0x3200,0x4024,
	0xc100,0x0024,0x0000,0x0101,0x2903,0x4d80,0x3a00,0x0024,
	0xb880,0x2013,0x2903,0x5c40,0xf400,0x4010,0x36f4,0x9813,
	0x36f4,0x1811,0x36f1,0x1805,0x36f0,0x9803,0x36f0,0x1801,
	0x3405,0x9014,0x36f3,0x0024,0x36f2,0x1815,0x2000,0x0000,
	0x36f2,0x9817,0x3613,0x0024,0x3e12,0xb804,0x3e10,0xf802,
	0x3e15,0x380d,0x3e13,0xf80e,0x3009,0x3813,0xf400,0x4497,
	0x3710,0xc024,0x3755,0x4024,0x37e0,0x0024,0x4030,0x1fd3,
	0xbd86,0x4012,0x3740,0x0024,0x001f,0xffc4,0x4408,0x1e40,
	0x4090,0x4114,0x0001,0x000a,0x2403,0xa300,0xfe25,0x5c28,
	0x5807,0x5c28,0x4db6,0x1d00,0x6090,0x1f04,0xf7d6,0x3c40,
	0x6044,0x1fd5,0x0008,0x0002,0x2803,0xa608,0xf400,0x4500,
	0x4200,0x0024,0xb080,0x4014,0x3f10,0x160c,0x3f05,0x4024,
	0x4380,0x9bd3,0x36f3,0xd80e,0x36f5,0x180d,0x36f0,0xd802,
	0x2000,0x0000,0x36f2,0x9804,
	0x0007,0x0001, /*copy 1*/
	0x8029,
	0x0006,0x0002, /*copy 2*/
	0x2a03,0x408e};


void load_code(void){
  
  int i = 0;
  while (i< PLUGIN_SIZE) {
    word addr, n, val;
    addr = pgm_read_word (&(plugin[i++]));
    n = pgm_read_word (&(plugin[i++]));
    if (n & 0x8000U) {
      n &= 0x7FFF;
      val = pgm_read_word (&(plugin[i++]));
      while (n--) {
        WriteReg16(addr, val);       
      }
    } 
    else {
      while (n--) {
        val = pgm_read_word (&(plugin[i++]));
        WriteReg16(addr, val);        
      }
    }
  }
  return;
}

void setup() {

  seed_random_from_rosc();
  analogReadResolution(12);
    
  pinMode(MP3_DREQ, INPUT);
  pinMode(MP3_CS, OUTPUT);
  pinMode(MP3_XDCS, OUTPUT);
  pinMode(MP3_RST, OUTPUT);

  PicoSPI0.configure (MP3_CLK, MP3_MOSI, MP3_MISO, MP3_CS, 4000000, 0, true);
  PicoSPI0.transfer(0xFF);

  digitalWrite(MP3_RST, HIGH);
  digitalWrite(MP3_CS, HIGH);
  digitalWrite(MP3_XDCS, HIGH);

  load_code();

  WriteReg16(SCI_AICTRL0, SAMPLE_RATE); // sample rate
  //WriteReg16(SCI_AICTRL1, 0x10);      // GPIO4 is high if space for 32 samples
  WriteReg16(SCI_VOL, 0x0000);          // lower volume
  WriteReg16(SCI_AICTRL2, 60);          // set pcm volume
  WriteReg16(SCI_AIADDR, 0x0d00);       // start pcm mixer


}

void loop() {

  if (ReadReg(SCI_AICTRL0) > 32){

    for (int i = 0; i < 32; i++) {
      
      int8_t value;
      form1Phase += form1PhaseInc;
      value = pgm_read_byte(sinCalc+(((form1Phase>>8) & 0xf0) | form1Amp));
      form2Phase += form2PhaseInc;
      value += pgm_read_byte(sinCalc+(((form2Phase>>8) & 0xf0) | form2Amp));
      form3Phase += form3PhaseInc;
      value += pgm_read_byte(sqrCalc+(((form3Phase>>8) & 0xf0) | form3Amp));
      value = (value * (0xff^(pitchPhase>>8)))>>8;
      pitchPhase += pitchPhaseInc;

      int sample = 127 * value;  

      int reverb = ((int)reverbBuffer[reverbAddr] * REVERB_DECAY) >> FIXED_BITS;
      reverb += sample;
      reverbBuffer[reverbAddr] = reverb;
      reverbAddr++;
      if (reverbAddr > REVERB_LENGTH) reverbAddr = 0;

      int16_t output = sample + (reverbBuffer[reverbAddr]>>2); 
      
      WriteReg16(SCI_AICTRL1, output);    

      if ((pitchPhase) < pitchPhaseInc) {
        form1Phase = 0;
        form2Phase = 0;
        form3Phase = 0;
      }
      
    }
  } 

}

void loop1() {
 
  uint8_t *framePos = frameList;
  
  while(1) {

    uint8_t startFormant,staticFrames,tweenFrames;
    uint16_t startPitch,nextPitch;
    uint8_t nextFormant;
    int16_t startForm1PhaseInc,startForm2PhaseInc,startForm3PhaseInc;
    uint8_t startForm1Amp,startForm2Amp,startForm3Amp;
    uint8_t *formantPos;

    startFormant = pgm_read_byte(framePos++);
    staticFrames = pgm_read_byte(framePos++);

    if (!staticFrames) break;

    tweenFrames = pgm_read_byte(framePos++);

    startPitch = pitchTable[pgm_read_byte(framePos++)];
    nextFormant = pgm_read_byte(framePos);
    nextPitch = pitchTable[pgm_read_byte(framePos+3)];
    pitchPhaseInc = startPitch;
    formantPos = formantTable + startFormant * FORMANT_SZ;
    form1PhaseInc = startForm1PhaseInc = pgm_read_byte(formantPos++)*formantScale;
    form2PhaseInc = startForm2PhaseInc = pgm_read_byte(formantPos++)*formantScale;
    form3PhaseInc = startForm3PhaseInc = pgm_read_byte(formantPos++)*formantScale;
    form1Amp = startForm1Amp = pgm_read_byte(formantPos++);
    form2Amp = startForm2Amp = pgm_read_byte(formantPos++);
    form3Amp = startForm3Amp = pgm_read_byte(formantPos++);

    for (;staticFrames--;) delay(frameTime);
    
    if (tweenFrames) {
      uint8_t* formantPos;
      int16_t deltaForm1PhaseInc,deltaForm2PhaseInc,deltaForm3PhaseInc;
      int8_t deltaForm1Amp,deltaForm2Amp,deltaForm3Amp;
      int16_t deltaPitch;
      tweenFrames--;
      formantPos = formantTable + nextFormant * FORMANT_SZ;
      deltaForm1PhaseInc = pgm_read_byte(formantPos++)*formantScale - startForm1PhaseInc;
      deltaForm2PhaseInc = pgm_read_byte(formantPos++)*formantScale - startForm2PhaseInc;
      deltaForm3PhaseInc = pgm_read_byte(formantPos++)*formantScale - startForm3PhaseInc;
      deltaForm1Amp = pgm_read_byte(formantPos++) - startForm1Amp;
      deltaForm2Amp = pgm_read_byte(formantPos++) - startForm2Amp;
      deltaForm3Amp = pgm_read_byte(formantPos++) - startForm3Amp;
      deltaPitch = nextPitch - startPitch;
      for (int i=1; i<=tweenFrames; i++) {
        form1PhaseInc = startForm1PhaseInc + (i*deltaForm1PhaseInc)/tweenFrames;
        form2PhaseInc = startForm2PhaseInc + (i*deltaForm2PhaseInc)/tweenFrames;
        form3PhaseInc = startForm3PhaseInc + (i*deltaForm3PhaseInc)/tweenFrames;
        form1Amp = startForm1Amp + (i*deltaForm1Amp)/tweenFrames;
        form2Amp = startForm2Amp + (i*deltaForm2Amp)/tweenFrames;
        form3Amp = startForm3Amp + (i*deltaForm3Amp)/tweenFrames;
        pitchPhaseInc = startPitch + (i*deltaPitch)/tweenFrames;
        delay(frameTime);
      }
    }
  }

}