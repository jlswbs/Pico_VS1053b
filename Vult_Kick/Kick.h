
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef KICK_H
#define KICK_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Kick.tables.h"

typedef struct _tuple___real_real__ {
   fix16_t field_0;
   fix16_t field_1;
} _tuple___real_real__;

typedef struct Kick__ctx_type_0 {
   uint8_t pre;
} Kick__ctx_type_0;

typedef Kick__ctx_type_0 Kick_edge_type;

static_inline void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Kick_edge_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Kick_edge(Kick__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Kick__ctx_type_1 {
   fix16_t pre_x;
} Kick__ctx_type_1;

typedef Kick__ctx_type_1 Kick_change_type;

static_inline void Kick__ctx_type_1_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Kick_change_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Kick_change(Kick__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Kick_pitchToRate_1024_raw_c0(int index){
   return Kick_pitchToRate_1024_c0[index];
};

static_inline fix16_t Kick_pitchToRate_1024_raw_c1(int index){
   return Kick_pitchToRate_1024_c1[index];
};

static_inline fix16_t Kick_pitchToRate_1024_raw_c2(int index){
   return Kick_pitchToRate_1024_c2[index];
};

static_inline fix16_t Kick_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Kick_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Kick_pitchToRate_1024_c1)[index] + fix_mul(pitch,fix_wrap_array(Kick_pitchToRate_1024_c2)[index]))));
}

static_inline fix16_t Kick_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Kick_cvToRate_1024_raw_c0(int index){
   return Kick_cvToRate_1024_c0[index];
};

static_inline fix16_t Kick_cvToRate_1024_raw_c1(int index){
   return Kick_cvToRate_1024_c1[index];
};

static_inline fix16_t Kick_cvToRate_1024_raw_c2(int index){
   return Kick_cvToRate_1024_c2[index];
};

static_inline fix16_t Kick_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Kick_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Kick_cvToRate_1024_c1)[index] + fix_mul(cv,fix_wrap_array(Kick_cvToRate_1024_c2)[index]))));
}

static_inline fix16_t Kick_tanh_table_raw_c0(int index){
   return Kick_tanh_table_c0[index];
};

static_inline fix16_t Kick_tanh_table_raw_c1(int index){
   return Kick_tanh_table_c1[index];
};

static_inline fix16_t Kick_tanh_table_raw_c2(int index){
   return Kick_tanh_table_c2[index];
};

static_inline fix16_t Kick_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x50000 /* 5.000000 */,(0x180000 /* 24.000000 */ + x))),0,240);
   return (fix_wrap_array(Kick_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Kick_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Kick_tanh_table_c2)[index]))));
}

static_inline fix16_t Kick_saturate(fix16_t x){
   return Kick_tanh_table(x);
};

typedef struct Kick__ctx_type_16 {
   fix16_t w1;
} Kick__ctx_type_16;

typedef Kick__ctx_type_16 Kick_pinker_type;

static_inline void Kick__ctx_type_16_init(Kick__ctx_type_16 &_output_){
   Kick__ctx_type_16 _ctx;
   _ctx.w1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Kick_pinker_init(Kick__ctx_type_16 &_output_){
   Kick__ctx_type_16_init(_output_);
   return ;
}

fix16_t Kick_pinker(Kick__ctx_type_16 &_ctx, fix16_t x);

typedef struct Kick__ctx_type_17 {
   int x2;
   int x1;
   Kick__ctx_type_16 _inst1a5;
} Kick__ctx_type_17;

typedef Kick__ctx_type_17 Kick_noise_type;

void Kick__ctx_type_17_init(Kick__ctx_type_17 &_output_);

static_inline void Kick_noise_init(Kick__ctx_type_17 &_output_){
   Kick__ctx_type_17_init(_output_);
   return ;
}

fix16_t Kick_noise(Kick__ctx_type_17 &_ctx, fix16_t color);

typedef struct Kick__ctx_type_18 {
   uint8_t reset_state;
   fix16_t reset_phase;
   fix16_t rate;
   fix16_t phase;
   uint8_t direction;
   Kick__ctx_type_0 _inst480;
   Kick__ctx_type_0 _inst380;
   Kick__ctx_type_1 _inst1bf;
} Kick__ctx_type_18;

typedef Kick__ctx_type_18 Kick_tricore_type;

void Kick__ctx_type_18_init(Kick__ctx_type_18 &_output_);

static_inline void Kick_tricore_init(Kick__ctx_type_18 &_output_){
   Kick__ctx_type_18_init(_output_);
   return ;
}

fix16_t Kick_tricore(Kick__ctx_type_18 &_ctx, fix16_t cv, fix16_t reset, fix16_t disable);

typedef struct Kick__ctx_type_19 {
   fix16_t out;
   Kick__ctx_type_0 _inst180;
} Kick__ctx_type_19;

typedef Kick__ctx_type_19 Kick_swept_type;

void Kick__ctx_type_19_init(Kick__ctx_type_19 &_output_);

static_inline void Kick_swept_init(Kick__ctx_type_19 &_output_){
   Kick__ctx_type_19_init(_output_);
   return ;
}

fix16_t Kick_swept(Kick__ctx_type_19 &_ctx, fix16_t gate, fix16_t start, fix16_t end, fix16_t rate);

typedef struct Kick__ctx_type_20 {
   fix16_t target;
   int state;
   fix16_t rate;
   fix16_t out;
   fix16_t hold_phase;
   fix16_t ahr_ret_1;
   fix16_t ahr_ret_0;
   Kick__ctx_type_0 _inst380;
   Kick__ctx_type_0 _inst180;
} Kick__ctx_type_20;

typedef Kick__ctx_type_20 Kick_ahr_type;

void Kick__ctx_type_20_init(Kick__ctx_type_20 &_output_);

static_inline void Kick_ahr_init(Kick__ctx_type_20 &_output_){
   Kick__ctx_type_20_init(_output_);
   return ;
}

void Kick_ahr(Kick__ctx_type_20 &_ctx, fix16_t gate, fix16_t a, fix16_t h, fix16_t r);

typedef Kick__ctx_type_20 Kick_ahr_ret_0_type;

static_inline void Kick_ahr_ret_0_init(Kick__ctx_type_20 &_output_){
   Kick__ctx_type_20_init(_output_);
   return ;
}

static_inline fix16_t Kick_ahr_ret_0(Kick__ctx_type_20 &_ctx){
   return _ctx.ahr_ret_0;
};

typedef Kick__ctx_type_20 Kick_ahr_ret_1_type;

static_inline void Kick_ahr_ret_1_init(Kick__ctx_type_20 &_output_){
   Kick__ctx_type_20_init(_output_);
   return ;
}

static_inline fix16_t Kick_ahr_ret_1(Kick__ctx_type_20 &_ctx){
   return _ctx.ahr_ret_1;
};

typedef struct Kick__ctx_type_21 {
   Kick__ctx_type_17 _inst5de;
   Kick__ctx_type_20 _inst458;
   Kick__ctx_type_18 _inst3ca;
   Kick__ctx_type_19 _inst24a;
   Kick__ctx_type_20 _inst158;
} Kick__ctx_type_21;

typedef Kick__ctx_type_21 Kick_process_type;

void Kick__ctx_type_21_init(Kick__ctx_type_21 &_output_);

static_inline void Kick_process_init(Kick__ctx_type_21 &_output_){
   Kick__ctx_type_21_init(_output_);
   return ;
}

fix16_t Kick_process(Kick__ctx_type_21 &_ctx, fix16_t gate, fix16_t odecay, fix16_t pitch, fix16_t swept, fix16_t noise);



#endif // KICK_H
