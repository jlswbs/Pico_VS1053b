
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef KICK_H
#define KICK_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Kick.tables.h"

typedef struct _tuple___real_real__ {
   fix16_t field_0;
   fix16_t field_1;
} _tuple___real_real__;

typedef struct Noise__ctx_type_0 {
   fix16_t w1;
} Noise__ctx_type_0;

typedef Noise__ctx_type_0 Noise_pinker_type;

static_inline void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.w1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Noise_pinker_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

fix16_t Noise_pinker(Noise__ctx_type_0 &_ctx, fix16_t x);

typedef struct Noise__ctx_type_1 {
   int x2;
   int x1;
   Noise__ctx_type_0 _inst190;
} Noise__ctx_type_1;

typedef Noise__ctx_type_1 Noise_process_type;

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_);

static_inline void Noise_process_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

fix16_t Noise_process(Noise__ctx_type_1 &_ctx, fix16_t color);

typedef Noise__ctx_type_1 Noise_noteOn_type;

static_inline void Noise_noteOn_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_noteOn(Noise__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Noise__ctx_type_1 Noise_noteOff_type;

static_inline void Noise_noteOff_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_noteOff(Noise__ctx_type_1 &_ctx, int note, int channel){
}

typedef Noise__ctx_type_1 Noise_controlChange_type;

static_inline void Noise_controlChange_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_controlChange(Noise__ctx_type_1 &_ctx, int control, int value, int channel){
}

typedef Noise__ctx_type_1 Noise_default_type;

static_inline void Noise_default_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_default(Noise__ctx_type_1 &_ctx){
}

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

static_inline void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Util__ctx_type_1 {
   fix16_t pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

static_inline void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return (y0 + fix_div(fix_mul((x + (- x0)),(y1 + (- y0))),(x1 + (- x0))));
};

typedef struct Util__ctx_type_3 {
   fix16_t y1;
   fix16_t x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

static_inline void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0);

typedef struct Util__ctx_type_4 {
   fix16_t x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

static_inline void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

static_inline fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul(0x147 /* 0.005000 */,(input + (- _ctx.x))));
   return _ctx.x;
}

typedef struct Util__ctx_type_5 {
   fix16_t x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

static_inline void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = ((_ctx.x0 + x1) >> 1);
   _ctx.x0 = x1;
   return result;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
};

static_inline fix16_t Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
};

static_inline fix16_t Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
};

static_inline fix16_t Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
};

static_inline fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_1024_c1)[index] + fix_mul(pitch,fix_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

static_inline fix16_t Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
};

static_inline fix16_t Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
};

static_inline fix16_t Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
};

static_inline fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_c1)[index] + fix_mul(pitch,fix_wrap_array(Util_pitchToRate_c2)[index]))));
}

static_inline fix16_t Util_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
};

static_inline fix16_t Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
};

static_inline fix16_t Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
};

static_inline fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_1024_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

static_inline fix16_t Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
};

static_inline fix16_t Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
};

static_inline fix16_t Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
};

static_inline fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Util_cvToRate_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToRate_c2)[index]))));
}

static_inline fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,(-0x180000 /* -24.000000 */ + pitch));
};

static_inline fix16_t Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
};

static_inline fix16_t Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
};

static_inline fix16_t Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
};

static_inline fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToperiod_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToperiod_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToperiod_c2)[index]))));
}

static_inline fix16_t Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
};

static_inline fix16_t Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
};

static_inline fix16_t Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
};

static_inline fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvTokHz_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvTokHz_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvTokHz_c2)[index]))));
}

typedef struct Tricore__ctx_type_0 {
   uint8_t reset_state;
   fix16_t reset_phase;
   fix16_t rate;
   fix16_t phase;
   uint8_t direction;
   Util__ctx_type_0 _inst451;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_1 _inst13b;
} Tricore__ctx_type_0;

typedef Tricore__ctx_type_0 Tricore_process_type;

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_);

static_inline void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

fix16_t Tricore_process(Tricore__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset, fix16_t disable);

typedef Tricore__ctx_type_0 Tricore_noteOn_type;

static_inline void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Tricore__ctx_type_0 Tricore_noteOff_type;

static_inline void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

typedef Tricore__ctx_type_0 Tricore_controlChange_type;

static_inline void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Tricore__ctx_type_0 Tricore_default_type;

static_inline void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
};

typedef struct Swept__ctx_type_0 {
   fix16_t out;
   Util__ctx_type_0 _inst151;
} Swept__ctx_type_0;

typedef Swept__ctx_type_0 Swept_process_type;

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_);

static_inline void Swept_process_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

fix16_t Swept_process(Swept__ctx_type_0 &_ctx, fix16_t gate, fix16_t start, fix16_t end, fix16_t rate);

typedef Swept__ctx_type_0 Swept_noteOn_type;

static_inline void Swept_noteOn_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

static_inline void Swept_noteOn(Swept__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Swept__ctx_type_0 Swept_noteOff_type;

static_inline void Swept_noteOff_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

static_inline void Swept_noteOff(Swept__ctx_type_0 &_ctx, int note, int channel){
}

typedef Swept__ctx_type_0 Swept_controlChange_type;

static_inline void Swept_controlChange_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

static_inline void Swept_controlChange(Swept__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Swept__ctx_type_0 Swept_default_type;

static_inline void Swept_default_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

static_inline void Swept_default(Swept__ctx_type_0 &_ctx){
}

static_inline fix16_t Saturate_tanh_table_raw_c0(int index){
   return Saturate_tanh_table_c0[index];
};

static_inline fix16_t Saturate_tanh_table_raw_c1(int index){
   return Saturate_tanh_table_c1[index];
};

static_inline fix16_t Saturate_tanh_table_raw_c2(int index){
   return Saturate_tanh_table_c2[index];
};

static_inline fix16_t Saturate_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x50000 /* 5.000000 */,(0x180000 /* 24.000000 */ + x))),0,240);
   return (fix_wrap_array(Saturate_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Saturate_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Saturate_tanh_table_c2)[index]))));
}

static_inline fix16_t Saturate_process(fix16_t x){
   return Saturate_tanh_table(x);
};

static_inline void Saturate_noteOn(int note, int velocity, int channel){
}

static_inline void Saturate_noteOff(int note, int channel){
}

static_inline void Saturate_controlChange(int control, int value, int channel){
}

static_inline void Saturate_default(){
}

typedef struct Ahr__ctx_type_0 {
   fix16_t target;
   int state;
   fix16_t rate;
   fix16_t out;
   fix16_t hold_phase;
   fix16_t do_ret_1;
   fix16_t do_ret_0;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_0 _inst151;
} Ahr__ctx_type_0;

typedef Ahr__ctx_type_0 Ahr_do_type;

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_);

static_inline void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, fix16_t gate, fix16_t a, fix16_t h, fix16_t r);

typedef Ahr__ctx_type_0 Ahr_do_ret_0_type;

static_inline void Ahr_do_ret_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Ahr_do_ret_0(Ahr__ctx_type_0 &_ctx){
   return _ctx.do_ret_0;
};

typedef Ahr__ctx_type_0 Ahr_do_ret_1_type;

static_inline void Ahr_do_ret_1_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Ahr_do_ret_1(Ahr__ctx_type_0 &_ctx){
   return _ctx.do_ret_1;
};

typedef struct Ahr__ctx_type_1 {
   fix16_t process_ret_1;
   fix16_t process_ret_0;
   fix16_t knob3;
   fix16_t knob2;
   fix16_t knob1;
   Ahr__ctx_type_0 _inst147;
} Ahr__ctx_type_1;

typedef Ahr__ctx_type_1 Ahr_process_type;

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_);

static_inline void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ahr_process(Ahr__ctx_type_1 &_ctx, fix16_t gate){
   Ahr_do(_ctx._inst147,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3);
   _ctx.process_ret_0 = Ahr_do_ret_0(_ctx._inst147);
   _ctx.process_ret_1 = Ahr_do_ret_1(_ctx._inst147);
   return ;
}

typedef Ahr__ctx_type_1 Ahr_process_ret_0_type;

static_inline void Ahr_process_ret_0_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline fix16_t Ahr_process_ret_0(Ahr__ctx_type_1 &_ctx){
   return _ctx.process_ret_0;
};

typedef Ahr__ctx_type_1 Ahr_process_ret_1_type;

static_inline void Ahr_process_ret_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline fix16_t Ahr_process_ret_1(Ahr__ctx_type_1 &_ctx){
   return _ctx.process_ret_1;
};

typedef Ahr__ctx_type_1 Ahr_noteOn_type;

static_inline void Ahr_noteOn_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ahr_noteOn(Ahr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Ahr__ctx_type_1 Ahr_noteOff_type;

static_inline void Ahr_noteOff_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ahr_noteOff(Ahr__ctx_type_1 &_ctx, int note, int channel){
}

typedef Ahr__ctx_type_1 Ahr_controlChange_type;

static_inline void Ahr_controlChange_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Ahr__ctx_type_1 Ahr_default_type;

static_inline void Ahr_default_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ahr_default(Ahr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
   _ctx.knob3 = 0x8000 /* 0.500000 */;
}

typedef struct Kick__ctx_type_0 {
   Noise__ctx_type_1 _inst5ab;
   Ahr__ctx_type_0 _inst447;
   Tricore__ctx_type_0 _inst341;
   Swept__ctx_type_0 _inst2eb;
   Ahr__ctx_type_0 _inst147;
} Kick__ctx_type_0;

typedef Kick__ctx_type_0 Kick_process_type;

void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_);

static_inline void Kick_process_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0_init(_output_);
   return ;
}

fix16_t Kick_process(Kick__ctx_type_0 &_ctx, fix16_t gate, fix16_t odecay, fix16_t pitch, fix16_t swept, fix16_t noise);

class Kick
{
public:
  Kick(void)
  {
    Kick_process_init(data);
  }

  int16_t output(int gate, int decay, int pitch, int swept, int noise) { return Kick_process(data, gate, decay, pitch, swept, noise) >> 2; }

private:
  Kick_process_type data;

};

#endif // KICK_H
