
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Kick.h"

fix16_t Noise_pinker(Noise__ctx_type_0 &_ctx, fix16_t x){
   fix16_t b0;
   b0 = 0x718 /* 0.027713 */;
   fix16_t b1;
   b1 = 0x718 /* 0.027713 */;
   fix16_t a1;
   a1 = -0xf1cf /* -0.944574 */;
   fix16_t w0;
   w0 = (x + (- fix_mul(_ctx.w1,a1)));
   fix16_t y0;
   y0 = (fix_mul(_ctx.w1,b1) + fix_mul(b0,w0));
   _ctx.w1 = w0;
   return y0;
}

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   Noise__ctx_type_0_init(_ctx._inst190);
   _output_ = _ctx;
   return ;
}

fix16_t Noise_process(Noise__ctx_type_1 &_ctx, fix16_t color){
   _ctx.x1 = ((7919 + (17389 * _ctx.x1)) % 32768);
   fix16_t y1;
   y1 = fix_mul(0x2 /* 0.000031 */,int_to_fix(_ctx.x1));
   _ctx.x2 = ((12553 + (27449 * _ctx.x2)) % 32768);
   fix16_t y2;
   y2 = fix_mul(0x2 /* 0.000031 */,int_to_fix(_ctx.x2));
   fix16_t out;
   if(color > 0x8000 /* 0.500000 */){
      out = Noise_pinker(_ctx._inst190,(y1 + (- y2)));
   }
   else
   {
      out = (y1 + (- y2));
   }
   return (out << 1);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */,_ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.direction = false;
   Util__ctx_type_0_init(_ctx._inst451);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Tricore_process(Tricore__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset, fix16_t disable){
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = (Util_cvToRate_1024(cv) << 2);
   }
   fix16_t new_phase;
   fix16_t _if_13;
   if(_ctx.direction){
      _if_13 = _ctx.rate;
   }
   else
   {
      _if_13 = (- _ctx.rate);
   }
   new_phase = (_ctx.phase + _if_13);
   uint8_t bdisable;
   bdisable = (disable > 0x8000 /* 0.500000 */);
   if(Util_edge(_ctx._inst351,(reset > 0x0 /* 0.000000 */)) || Util_edge(_ctx._inst451,bdisable)){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0x0 /* 0.000000 */;
   }
   if(new_phase > 0x4000000 /* 1024.000000 */){
      new_phase = (0x4000000 /* 1024.000000 */ + (- (-0x4000000 /* -1024.000000 */ + new_phase)));
      _ctx.direction = false;
   }
   else
   {
      if(new_phase < -0x4000000 /* -1024.000000 */){
         _ctx.direction = true;
      }
   }
   if(bdisable){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.phase = new_phase;
   }
   if(_ctx.reset_state){
      if((fix_abs(_ctx.reset_phase) > 0xa0000 /* 10.000000 */) || bdisable){
         fix16_t reset_speed;
         if(bdisable){
            reset_speed = 0x28f /* 0.010000 */;
         }
         else
         {
            reset_speed = 0x8000 /* 0.500000 */;
         }
         _ctx.reset_phase = (_ctx.reset_phase + (- fix_mul(_ctx.reset_phase,reset_speed)));
      }
      else
      {
         uint8_t _cond_17;
         _cond_17 = (_ctx.reset_phase > 0xa0000 /* 10.000000 */);
         if(bool_not(_cond_17)){
            _ctx.reset_phase = 0x0 /* 0.000000 */;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (_ctx.phase + out);
   return (out >> 10);
}

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0 _ctx;
   _ctx.out = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst151);
   _output_ = _ctx;
   return ;
}

fix16_t Swept_process(Swept__ctx_type_0 &_ctx, fix16_t gate, fix16_t start, fix16_t end, fix16_t rate){
   fix16_t a_rate;
   a_rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,rate)));
   uint8_t bgate;
   bgate = (gate > 0x8000 /* 0.500000 */);
   _ctx.out = (_ctx.out + fix_mul(fix_mul(0x106 /* 0.004000 */,rate),((- _ctx.out) + (end << 10))));
   if(Util_edge(_ctx._inst151,bgate)){
      _ctx.out = (start << 10);
   }
   return (_ctx.out >> 10);
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   _ctx.hold_phase = 0x0 /* 0.000000 */;
   _ctx.do_ret_1 = 0x0 /* 0.000000 */;
   _ctx.do_ret_0 = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_0_init(_ctx._inst151);
   _output_ = _ctx;
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, fix16_t gate, fix16_t a, fix16_t h, fix16_t r){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0x0 /* 0.000000 */);
   if(Util_edge(_ctx._inst151,bgate)){
      _ctx.state = reset;
   }
   fix16_t resetting;
   if(_ctx.state == reset){
      resetting = 0x10000 /* 1.000000 */;
   }
   else
   {
      resetting = 0x0 /* 0.000000 */;
   }
   if(Util_edge(_ctx._inst351,(_ctx.out > 0x4000000 /* 1024.000000 */))){
      _ctx.hold_phase = 0x0 /* 0.000000 */;
      _ctx.state = hold;
   }
   if((_ctx.out < 0xa0000 /* 10.000000 */) && (_ctx.state == reset)){
      _ctx.state = attack;
   }
   if((_ctx.hold_phase > 0x640000 /* 100.000000 */) && (_ctx.state == hold)){
      _ctx.state = release;
   }
   if(_ctx.state == reset){
      _ctx.rate = 0xfd77 /* 0.990099 */;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   if(_ctx.state == attack){
      _ctx.rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,a)));
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   if(_ctx.state == hold){
      fix16_t hrate;
      hrate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,h)));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   if(_ctx.state == release){
      _ctx.rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,r)));
      _ctx.target = 0x0 /* 0.000000 */;
   }
   _ctx.out = (_ctx.out + fix_mul(fix_mul(0x147 /* 0.005000 */,_ctx.rate),(_ctx.target + (- _ctx.out))));
   _ctx.do_ret_0 = fix_clip((_ctx.out >> 10),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.do_ret_1 = resetting;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.process_ret_1 = 0x0 /* 0.000000 */;
   _ctx.process_ret_0 = 0x0 /* 0.000000 */;
   _ctx.knob3 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x0 /* 0.000000 */;
   _ctx.knob1 = 0x0 /* 0.000000 */;
   Ahr__ctx_type_0_init(_ctx._inst147);
   _output_ = _ctx;
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 2){
      _ctx.knob2 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 3){
      _ctx.knob3 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
}

void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0 _ctx;
   Noise__ctx_type_1_init(_ctx._inst5ab);
   Ahr__ctx_type_0_init(_ctx._inst447);
   Tricore__ctx_type_0_init(_ctx._inst341);
   Swept__ctx_type_0_init(_ctx._inst2eb);
   Ahr__ctx_type_0_init(_ctx._inst147);
   _output_ = _ctx;
   return ;
}

fix16_t Kick_process(Kick__ctx_type_0 &_ctx, fix16_t gate, fix16_t odecay, fix16_t pitch, fix16_t swept, fix16_t noise){
   fix16_t osc_env;
   fix16_t env_reset;
   Ahr_do(_ctx._inst147,gate,0x147 /* 0.005000 */,(0x1999 /* 0.100000 */ + odecay),(0x28f /* 0.010000 */ + odecay));
   osc_env = Ahr_do_ret_0(_ctx._inst147);
   env_reset = Ahr_do_ret_1(_ctx._inst147);
   fix16_t cv;
   cv = Swept_process(_ctx._inst2eb,(0x10000 /* 1.000000 */ + (- env_reset)),(pitch + fix_mul(0x6666 /* 0.400000 */,swept)),pitch,0x1999 /* 0.100000 */);
   fix16_t osc;
   osc = Tricore_process(_ctx._inst341,cv,0x0 /* 0.000000 */,env_reset);
   fix16_t osc_sat;
   osc_sat = Saturate_process(fix_mul(0x18000 /* 1.500000 */,osc));
   fix16_t noise_env;
   Ahr_do(_ctx._inst447,gate,0x41 /* 0.001000 */,0x28f /* 0.010000 */,(0x41 /* 0.001000 */ + fix_mul(0x28f /* 0.010000 */,noise)));
   noise_env = Ahr_do_ret_0(_ctx._inst447);
   Ahr_do_ret_1(_ctx._inst447);
   fix16_t noise_osc;
   noise_osc = fix_mul(fix_mul(0x5555 /* 0.333333 */,noise),Noise_process(_ctx._inst5ab,0x10000 /* 1.000000 */));
   return (fix_mul(noise_env,noise_osc) + fix_mul(osc_env,osc_sat));
}


